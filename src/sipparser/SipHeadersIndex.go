/*---------------- generated by abnf v0.1.0 2018-05-11 22:54:10.415 ----------------*/
package sipparser

/*---------------- index definition ----------------*/
const (
	SIP_HDR_UNKNOWN                       SipHeaderIndexType = 0
	SIP_HDR_ACCEPT                        SipHeaderIndexType = 1
	SIP_HDR_ACCEPT_ENCODING               SipHeaderIndexType = 2
	SIP_HDR_ACCEPT_ALNGUAGE               SipHeaderIndexType = 3
	SIP_HDR_ALERT_INFO                    SipHeaderIndexType = 4
	SIP_HDR_ALLOW                         SipHeaderIndexType = 5
	SIP_HDR_AUTHENTICATION_INFO           SipHeaderIndexType = 6
	SIP_HDR_AUTHORIZATION                 SipHeaderIndexType = 7
	SIP_HDR_CALL_ID                       SipHeaderIndexType = 8
	SIP_HDR_CALL_INFO                     SipHeaderIndexType = 9
	SIP_HDR_CONTACT                       SipHeaderIndexType = 10
	SIP_HDR_CONTENT_DISPOSITION           SipHeaderIndexType = 11
	SIP_HDR_CONTENT_ENCODING              SipHeaderIndexType = 12
	SIP_HDR_CONTENT_LANGUAGE              SipHeaderIndexType = 13
	SIP_HDR_CONTENT_LENGTH                SipHeaderIndexType = 14
	SIP_HDR_CONTENT_TYPE                  SipHeaderIndexType = 15
	SIP_HDR_CSEQ                          SipHeaderIndexType = 16
	SIP_HDR_DATE                          SipHeaderIndexType = 17
	SIP_HDR_ERROR_INFO                    SipHeaderIndexType = 18
	SIP_HDR_EXPIRES                       SipHeaderIndexType = 19
	SIP_HDR_FROM                          SipHeaderIndexType = 20
	SIP_HDR_IN_REPLY_TO                   SipHeaderIndexType = 21
	SIP_HDR_MAX_FORWARDS                  SipHeaderIndexType = 22
	SIP_HDR_MIN_EXPIRES                   SipHeaderIndexType = 23
	SIP_HDR_MIME_VERSION                  SipHeaderIndexType = 24
	SIP_HDR_ORGANIZATION                  SipHeaderIndexType = 25
	SIP_HDR_PRIORITY                      SipHeaderIndexType = 26
	SIP_HDR_PROXY_AUTHENTICATE            SipHeaderIndexType = 27
	SIP_HDR_PROXY_AUTHORIZATION           SipHeaderIndexType = 28
	SIP_HDR_PROXY_REQUIRE                 SipHeaderIndexType = 29
	SIP_HDR_RECORD_ROUTE                  SipHeaderIndexType = 30
	SIP_HDR_REPLY_TO                      SipHeaderIndexType = 31
	SIP_HDR_REQUIRE                       SipHeaderIndexType = 32
	SIP_HDR_RETRY_AFTER                   SipHeaderIndexType = 33
	SIP_HDR_ROUTE                         SipHeaderIndexType = 34
	SIP_HDR_SERVER                        SipHeaderIndexType = 35
	SIP_HDR_SUBJECT                       SipHeaderIndexType = 36
	SIP_HDR_SUPPORTED                     SipHeaderIndexType = 37
	SIP_HDR_TIMESTAMP                     SipHeaderIndexType = 38
	SIP_HDR_TO                            SipHeaderIndexType = 39
	SIP_HDR_UNSUPPORTED                   SipHeaderIndexType = 40
	SIP_HDR_USER_AGENT                    SipHeaderIndexType = 41
	SIP_HDR_VIA                           SipHeaderIndexType = 42
	SIP_HDR_WARNING                       SipHeaderIndexType = 43
	SIP_HDR_WWW_AUTHENTICATE              SipHeaderIndexType = 44
	SIP_HDR_RSEQ                          SipHeaderIndexType = 45
	SIP_HDR_RACK                          SipHeaderIndexType = 46
	SIP_HDR_SUBSCRIPTION_STATE            SipHeaderIndexType = 47
	SIP_HDR_ALLOW_EVENTS                  SipHeaderIndexType = 48
	SIP_HDR_EVENT                         SipHeaderIndexType = 49
	SIP_HDR_P_MEDIA_AUTHORIZATION         SipHeaderIndexType = 50
	SIP_HDR_PRIVACY                       SipHeaderIndexType = 51
	SIP_HDR_P_ASSERTED_IDENTITY           SipHeaderIndexType = 52
	SIP_HDR_P_PREFERRED_IDENTITY          SipHeaderIndexType = 53
	SIP_HDR_REASON                        SipHeaderIndexType = 54
	SIP_HDR_PATH                          SipHeaderIndexType = 55
	SIP_HDR_SECURITY_CLIENT               SipHeaderIndexType = 56
	SIP_HDR_SECURITY_SERVER               SipHeaderIndexType = 57
	SIP_HDR_SECURITY_VERIFY               SipHeaderIndexType = 58
	SIP_HDR_P_ASSOCIATED_URI              SipHeaderIndexType = 59
	SIP_HDR_P_CALLED_PARTY_ID             SipHeaderIndexType = 60
	SIP_HDR_P_VISITED_NETWORK_ID          SipHeaderIndexType = 61
	SIP_HDR_P_ACCESS_NETWORK_INFO         SipHeaderIndexType = 62
	SIP_HDR_P_CHARGING_FUNCTION_ADDRESSES SipHeaderIndexType = 63
	SIP_HDR_P_CHARGING_VECTOR             SipHeaderIndexType = 64
	SIP_HDR_REFER_TO                      SipHeaderIndexType = 65
	SIP_HDR_P_DCS_TRACE_PARTY_ID          SipHeaderIndexType = 66
	SIP_HDR_P_DCS_OSPS                    SipHeaderIndexType = 67
	SIP_HDR_P_DCS_BILLING_INFO            SipHeaderIndexType = 68
	SIP_HDR_P_DCS_LAES                    SipHeaderIndexType = 69
	SIP_HDR_DCS_REDIRECT                  SipHeaderIndexType = 70
	SIP_HDR_SERVICE_ROUTE                 SipHeaderIndexType = 71
	SIP_HDR_ACCEPT_CONTACT                SipHeaderIndexType = 72
	SIP_HDR_REJECT_CONTACT                SipHeaderIndexType = 73
	SIP_HDR_REQUEST_DISPOSITION           SipHeaderIndexType = 74
	SIP_HDR_REPLACES                      SipHeaderIndexType = 75
	SIP_HDR_REFERRED_BY                   SipHeaderIndexType = 76
	SIP_HDR_SIP_ETAG                      SipHeaderIndexType = 77
	SIP_SIP_IF_MATCH                      SipHeaderIndexType = 78
	SIP_HDR_JOIN                          SipHeaderIndexType = 79
	SIP_HDR_CONTENT_TRANSFER_ENCODING     SipHeaderIndexType = 80
	SIP_HDR_CONTENT_ID                    SipHeaderIndexType = 81
	SIP_HDR_CONTENT_DESCRIPTION           SipHeaderIndexType = 82
	SIP_HDR_SESSION_EXPIRES               SipHeaderIndexType = 83
	SIP_HDR_MIN_SE                        SipHeaderIndexType = 84
	SIP_HDR_HISTORY_INFO                  SipHeaderIndexType = 85
	SIP_HDR_RESOURCE_PRIORITY             SipHeaderIndexType = 86
	SIP_HDR_ACCEPT_RESOURCE_PRIORITY      SipHeaderIndexType = 87
	SIP_HDR_P_USER_DATABASE               SipHeaderIndexType = 88
	SIP_HDR_IDENTITY                      SipHeaderIndexType = 89
	SIP_HDR_IDENTITY_INFO                 SipHeaderIndexType = 90
	SIP_HDR_REFER_SUB                     SipHeaderIndexType = 91
	SIP_HDR_TARGET_DIALOG                 SipHeaderIndexType = 92
	SIP_HDR_P_ANSWER_STATE                SipHeaderIndexType = 93
	SIP_HDR_P_PROFILE_KEY                 SipHeaderIndexType = 94
	SIP_HDR_P_EARLY_MEDIA                 SipHeaderIndexType = 95
	SIP_HDR_P_REFUSED_URI_LIST            SipHeaderIndexType = 96
	SIP_HDR_PERMISSION_MISSING            SipHeaderIndexType = 97
	SIP_HDR_TRIGGER_CONSENT               SipHeaderIndexType = 98
	SIP_HDR_ANSWER_MODE                   SipHeaderIndexType = 99
	SIP_HDR_PRIV_ANSWER_MODE              SipHeaderIndexType = 100
	SIP_HDR_MAX_BREADTH                   SipHeaderIndexType = 101
	SIP_HDR_P_SERVED_USER                 SipHeaderIndexType = 102
	SIP_HDR_FLOW_TIMER                    SipHeaderIndexType = 103
	SIP_HDR_SUPPRESS_IF_MATCH             SipHeaderIndexType = 104
	SIP_HDR_DIVERSION                     SipHeaderIndexType = 105
	SIP_HDR_P_ASSERTED_SERVICE            SipHeaderIndexType = 106
	SIP_HDR_P_PREFERRED_SERVICE           SipHeaderIndexType = 107
	SIP_HDR_INFO_PACKAGE                  SipHeaderIndexType = 108
	SIP_HDR_RECV_INFO                     SipHeaderIndexType = 109
	SIP_HDR_GEOLOCATION                   SipHeaderIndexType = 110
	SIP_HDR_GEOLOCATION_ROUTING           SipHeaderIndexType = 111
	SIP_HDR_GEOLOCATION_ERROR             SipHeaderIndexType = 112
	SIP_HDR_POLICY_ID                     SipHeaderIndexType = 113
	SIP_HDR_POLICY_CONTACT                SipHeaderIndexType = 114
	SIP_HDR_FEATURE_CAPS                  SipHeaderIndexType = 115
	SIP_HDR_P_PRIVATE_NETWORK_INDICATION  SipHeaderIndexType = 116
	SIP_HDR_SESSION_ID                    SipHeaderIndexType = 117
	SIP_HDR_USER_TO_USER                  SipHeaderIndexType = 118
	SIP_HDR_Refer_Events_At               SipHeaderIndexType = 119
	SIP_HDR_MAX_NUM                       SipHeaderIndexType = iota
)

func GetSipHeaderIndex(src []byte, pos AbnfPos) (SipHeaderIndexType, AbnfPos) {
	len1 := AbnfPos(len(src))

	if pos >= len1 {
		return SIP_HDR_UNKNOWN, pos
	}

	switch src[pos] | 0x20 {
	case 'a':
		pos++
		if (pos >= len1) || !IsSipToken(src[pos]) {
			return SIP_HDR_ACCEPT_CONTACT, pos
		}
		switch src[pos] | 0x20 {
		case 'c':
			pos++
			if (pos < len1) && ((src[pos] | 0x20) == 'c') {
				pos++
				switch src[pos] | 0x20 {
				case 'e':
					pos++
					if (pos < len1) && ((src[pos] | 0x20) == 'p') {
						pos++
						if (pos < len1) && ((src[pos] | 0x20) == 't') {
							pos++
							if (pos < len1) && (src[pos] == '-') {
								pos++
								switch src[pos] | 0x20 {
								case 'c':
									pos++
									if (pos + 5) >= len1 {
										return SIP_HDR_UNKNOWN, pos
									}
									if ((src[pos] | 0x20) == 'o') &&
										((src[pos+1] | 0x20) == 'n') &&
										((src[pos+2] | 0x20) == 't') &&
										((src[pos+3] | 0x20) == 'a') &&
										((src[pos+4] | 0x20) == 'c') &&
										((src[pos+5] | 0x20) == 't') {
										pos += 6
										if (pos >= len1) || !IsSipToken(src[pos]) {
											return SIP_HDR_ACCEPT_CONTACT, pos
										}
									}
									return SIP_HDR_UNKNOWN, pos
								case 'r':
									pos++
									if (pos + 15) >= len1 {
										return SIP_HDR_UNKNOWN, pos
									}
									if ((src[pos] | 0x20) == 'e') &&
										((src[pos+1] | 0x20) == 's') &&
										((src[pos+2] | 0x20) == 'o') &&
										((src[pos+3] | 0x20) == 'u') &&
										((src[pos+4] | 0x20) == 'r') &&
										((src[pos+5] | 0x20) == 'c') &&
										((src[pos+6] | 0x20) == 'e') &&
										(src[pos+7] == '-') &&
										((src[pos+8] | 0x20) == 'p') &&
										((src[pos+9] | 0x20) == 'r') &&
										((src[pos+10] | 0x20) == 'i') &&
										((src[pos+11] | 0x20) == 'o') &&
										((src[pos+12] | 0x20) == 'r') &&
										((src[pos+13] | 0x20) == 'i') &&
										((src[pos+14] | 0x20) == 't') &&
										((src[pos+15] | 0x20) == 'y') {
										pos += 16
										if (pos >= len1) || !IsSipToken(src[pos]) {
											return SIP_HDR_ACCEPT_RESOURCE_PRIORITY, pos
										}
									}
									return SIP_HDR_UNKNOWN, pos
								}
							}
						}
					}
					return SIP_HDR_UNKNOWN, pos
				case 'p':
					pos++
					if (pos < len1) && ((src[pos] | 0x20) == 'e') {
						pos++
						if (pos < len1) && ((src[pos] | 0x20) == 't') {
							pos++
							if (pos >= len1) || !IsSipToken(src[pos]) {
								return SIP_HDR_ACCEPT, pos
							}
							if (pos < len1) && (src[pos] == '-') {
								pos++
								switch src[pos] | 0x20 {
								case 'e':
									pos++
									if (pos + 6) >= len1 {
										return SIP_HDR_UNKNOWN, pos
									}
									if ((src[pos] | 0x20) == 'n') &&
										((src[pos+1] | 0x20) == 'c') &&
										((src[pos+2] | 0x20) == 'o') &&
										((src[pos+3] | 0x20) == 'd') &&
										((src[pos+4] | 0x20) == 'i') &&
										((src[pos+5] | 0x20) == 'n') &&
										((src[pos+6] | 0x20) == 'g') {
										pos += 7
										if (pos >= len1) || !IsSipToken(src[pos]) {
											return SIP_HDR_ACCEPT_ENCODING, pos
										}
									}
									return SIP_HDR_UNKNOWN, pos
								case 'l':
									pos++
									if (pos + 6) >= len1 {
										return SIP_HDR_UNKNOWN, pos
									}
									if ((src[pos] | 0x20) == 'a') &&
										((src[pos+1] | 0x20) == 'n') &&
										((src[pos+2] | 0x20) == 'g') &&
										((src[pos+3] | 0x20) == 'u') &&
										((src[pos+4] | 0x20) == 'a') &&
										((src[pos+5] | 0x20) == 'g') &&
										((src[pos+6] | 0x20) == 'e') {
										pos += 7
										if (pos >= len1) || !IsSipToken(src[pos]) {
											return SIP_HDR_ACCEPT_ALNGUAGE, pos
										}
									}
									return SIP_HDR_UNKNOWN, pos
								}
							}
						}
					}
					return SIP_HDR_UNKNOWN, pos
				}
			}
			return SIP_HDR_UNKNOWN, pos
		case 'l':
			pos++
			switch src[pos] | 0x20 {
			case 'e':
				pos++
				if (pos + 6) >= len1 {
					return SIP_HDR_UNKNOWN, pos
				}
				if ((src[pos] | 0x20) == 'r') &&
					((src[pos+1] | 0x20) == 't') &&
					(src[pos+2] == '-') &&
					((src[pos+3] | 0x20) == 'i') &&
					((src[pos+4] | 0x20) == 'n') &&
					((src[pos+5] | 0x20) == 'f') &&
					((src[pos+6] | 0x20) == 'o') {
					pos += 7
					if (pos >= len1) || !IsSipToken(src[pos]) {
						return SIP_HDR_ALERT_INFO, pos
					}
				}
				return SIP_HDR_UNKNOWN, pos
			case 'l':
				pos++
				if (pos < len1) && ((src[pos] | 0x20) == 'o') {
					pos++
					if (pos < len1) && ((src[pos] | 0x20) == 'w') {
						pos++
						if (pos >= len1) || !IsSipToken(src[pos]) {
							return SIP_HDR_ALLOW, pos
						}
						if (pos + 6) >= len1 {
							return SIP_HDR_UNKNOWN, pos
						}
						if (src[pos] == '-') &&
							((src[pos+1] | 0x20) == 'e') &&
							((src[pos+2] | 0x20) == 'v') &&
							((src[pos+3] | 0x20) == 'e') &&
							((src[pos+4] | 0x20) == 'n') &&
							((src[pos+5] | 0x20) == 't') &&
							((src[pos+6] | 0x20) == 's') {
							pos += 7
							if (pos >= len1) || !IsSipToken(src[pos]) {
								return SIP_HDR_ALLOW_EVENTS, pos
							}
						}
					}
				}
				return SIP_HDR_UNKNOWN, pos
			}
			return SIP_HDR_UNKNOWN, pos
		case 'n':
			pos++
			if (pos + 8) >= len1 {
				return SIP_HDR_UNKNOWN, pos
			}
			if ((src[pos] | 0x20) == 's') &&
				((src[pos+1] | 0x20) == 'w') &&
				((src[pos+2] | 0x20) == 'e') &&
				((src[pos+3] | 0x20) == 'r') &&
				(src[pos+4] == '-') &&
				((src[pos+5] | 0x20) == 'm') &&
				((src[pos+6] | 0x20) == 'o') &&
				((src[pos+7] | 0x20) == 'd') &&
				((src[pos+8] | 0x20) == 'e') {
				pos += 9
				if (pos >= len1) || !IsSipToken(src[pos]) {
					return SIP_HDR_ANSWER_MODE, pos
				}
			}
			return SIP_HDR_UNKNOWN, pos
		case 'u':
			pos++
			if (pos < len1) && ((src[pos] | 0x20) == 't') {
				pos++
				if (pos < len1) && ((src[pos] | 0x20) == 'h') {
					pos++
					switch src[pos] | 0x20 {
					case 'e':
						pos++
						if (pos + 13) >= len1 {
							return SIP_HDR_UNKNOWN, pos
						}
						if ((src[pos] | 0x20) == 'n') &&
							((src[pos+1] | 0x20) == 't') &&
							((src[pos+2] | 0x20) == 'i') &&
							((src[pos+3] | 0x20) == 'c') &&
							((src[pos+4] | 0x20) == 'a') &&
							((src[pos+5] | 0x20) == 't') &&
							((src[pos+6] | 0x20) == 'i') &&
							((src[pos+7] | 0x20) == 'o') &&
							((src[pos+8] | 0x20) == 'n') &&
							(src[pos+9] == '-') &&
							((src[pos+10] | 0x20) == 'i') &&
							((src[pos+11] | 0x20) == 'n') &&
							((src[pos+12] | 0x20) == 'f') &&
							((src[pos+13] | 0x20) == 'o') {
							pos += 14
							if (pos >= len1) || !IsSipToken(src[pos]) {
								return SIP_HDR_AUTHENTICATION_INFO, pos
							}
						}
						return SIP_HDR_UNKNOWN, pos
					case 'o':
						pos++
						if (pos + 7) >= len1 {
							return SIP_HDR_UNKNOWN, pos
						}
						if ((src[pos] | 0x20) == 'r') &&
							((src[pos+1] | 0x20) == 'i') &&
							((src[pos+2] | 0x20) == 'z') &&
							((src[pos+3] | 0x20) == 'a') &&
							((src[pos+4] | 0x20) == 't') &&
							((src[pos+5] | 0x20) == 'i') &&
							((src[pos+6] | 0x20) == 'o') &&
							((src[pos+7] | 0x20) == 'n') {
							pos += 8
							if (pos >= len1) || !IsSipToken(src[pos]) {
								return SIP_HDR_AUTHORIZATION, pos
							}
						}
						return SIP_HDR_UNKNOWN, pos
					}
				}
			}
			return SIP_HDR_UNKNOWN, pos
		}
		return SIP_HDR_UNKNOWN, pos
	case 'b':
		pos++
		if (pos >= len1) || !IsSipToken(src[pos]) {
			return SIP_HDR_REFERRED_BY, pos
		}
		return SIP_HDR_UNKNOWN, pos
	case 'c':
		pos++
		if (pos >= len1) || !IsSipToken(src[pos]) {
			return SIP_HDR_CONTENT_TYPE, pos
		}
		switch src[pos] | 0x20 {
		case 'a':
			pos++
			if (pos < len1) && ((src[pos] | 0x20) == 'l') {
				pos++
				if (pos < len1) && ((src[pos] | 0x20) == 'l') {
					pos++
					if (pos < len1) && (src[pos] == '-') {
						pos++
						if (pos < len1) && ((src[pos] | 0x20) == 'i') {
							pos++
							switch src[pos] | 0x20 {
							case 'd':
								pos++
								if (pos >= len1) || !IsSipToken(src[pos]) {
									return SIP_HDR_CALL_ID, pos
								}
								return SIP_HDR_UNKNOWN, pos
							case 'n':
								pos++
								if (pos + 1) >= len1 {
									return SIP_HDR_UNKNOWN, pos
								}
								if ((src[pos] | 0x20) == 'f') &&
									((src[pos+1] | 0x20) == 'o') {
									pos += 2
									if (pos >= len1) || !IsSipToken(src[pos]) {
										return SIP_HDR_CALL_INFO, pos
									}
								}
								return SIP_HDR_UNKNOWN, pos
							}
						}
					}
				}
			}
			return SIP_HDR_UNKNOWN, pos
		case 'o':
			pos++
			if (pos < len1) && ((src[pos] | 0x20) == 'n') {
				pos++
				if (pos < len1) && ((src[pos] | 0x20) == 't') {
					pos++
					switch src[pos] | 0x20 {
					case 'a':
						pos++
						if (pos + 1) >= len1 {
							return SIP_HDR_UNKNOWN, pos
						}
						if ((src[pos] | 0x20) == 'c') &&
							((src[pos+1] | 0x20) == 't') {
							pos += 2
							if (pos >= len1) || !IsSipToken(src[pos]) {
								return SIP_HDR_CONTACT, pos
							}
						}
						return SIP_HDR_UNKNOWN, pos
					case 'e':
						pos++
						if (pos < len1) && ((src[pos] | 0x20) == 'n') {
							pos++
							if (pos < len1) && ((src[pos] | 0x20) == 't') {
								pos++
								if (pos < len1) && (src[pos] == '-') {
									pos++
									switch src[pos] | 0x20 {
									case 'd':
										pos++
										switch src[pos] | 0x20 {
										case 'e':
											pos++
											if (pos + 8) >= len1 {
												return SIP_HDR_UNKNOWN, pos
											}
											if ((src[pos] | 0x20) == 's') &&
												((src[pos+1] | 0x20) == 'c') &&
												((src[pos+2] | 0x20) == 'r') &&
												((src[pos+3] | 0x20) == 'i') &&
												((src[pos+4] | 0x20) == 'p') &&
												((src[pos+5] | 0x20) == 't') &&
												((src[pos+6] | 0x20) == 'i') &&
												((src[pos+7] | 0x20) == 'o') &&
												((src[pos+8] | 0x20) == 'n') {
												pos += 9
												if (pos >= len1) || !IsSipToken(src[pos]) {
													return SIP_HDR_CONTENT_DESCRIPTION, pos
												}
											}
											return SIP_HDR_UNKNOWN, pos
										case 'i':
											pos++
											if (pos + 8) >= len1 {
												return SIP_HDR_UNKNOWN, pos
											}
											if ((src[pos] | 0x20) == 's') &&
												((src[pos+1] | 0x20) == 'p') &&
												((src[pos+2] | 0x20) == 'o') &&
												((src[pos+3] | 0x20) == 's') &&
												((src[pos+4] | 0x20) == 'i') &&
												((src[pos+5] | 0x20) == 't') &&
												((src[pos+6] | 0x20) == 'i') &&
												((src[pos+7] | 0x20) == 'o') &&
												((src[pos+8] | 0x20) == 'n') {
												pos += 9
												if (pos >= len1) || !IsSipToken(src[pos]) {
													return SIP_HDR_CONTENT_DISPOSITION, pos
												}
											}
											return SIP_HDR_UNKNOWN, pos
										}
										return SIP_HDR_UNKNOWN, pos
									case 'e':
										pos++
										if (pos + 6) >= len1 {
											return SIP_HDR_UNKNOWN, pos
										}
										if ((src[pos] | 0x20) == 'n') &&
											((src[pos+1] | 0x20) == 'c') &&
											((src[pos+2] | 0x20) == 'o') &&
											((src[pos+3] | 0x20) == 'd') &&
											((src[pos+4] | 0x20) == 'i') &&
											((src[pos+5] | 0x20) == 'n') &&
											((src[pos+6] | 0x20) == 'g') {
											pos += 7
											if (pos >= len1) || !IsSipToken(src[pos]) {
												return SIP_HDR_CONTENT_ENCODING, pos
											}
										}
										return SIP_HDR_UNKNOWN, pos
									case 'i':
										pos++
										if (pos < len1) && ((src[pos] | 0x20) == 'd') {
											pos++
											if (pos >= len1) || !IsSipToken(src[pos]) {
												return SIP_HDR_CONTENT_ID, pos
											}
										}
										return SIP_HDR_UNKNOWN, pos
									case 'l':
										pos++
										switch src[pos] | 0x20 {
										case 'a':
											pos++
											if (pos + 5) >= len1 {
												return SIP_HDR_UNKNOWN, pos
											}
											if ((src[pos] | 0x20) == 'n') &&
												((src[pos+1] | 0x20) == 'g') &&
												((src[pos+2] | 0x20) == 'u') &&
												((src[pos+3] | 0x20) == 'a') &&
												((src[pos+4] | 0x20) == 'g') &&
												((src[pos+5] | 0x20) == 'e') {
												pos += 6
												if (pos >= len1) || !IsSipToken(src[pos]) {
													return SIP_HDR_CONTENT_LANGUAGE, pos
												}
											}
											return SIP_HDR_UNKNOWN, pos
										case 'e':
											pos++
											if (pos + 3) >= len1 {
												return SIP_HDR_UNKNOWN, pos
											}
											if ((src[pos] | 0x20) == 'n') &&
												((src[pos+1] | 0x20) == 'g') &&
												((src[pos+2] | 0x20) == 't') &&
												((src[pos+3] | 0x20) == 'h') {
												pos += 4
												if (pos >= len1) || !IsSipToken(src[pos]) {
													return SIP_HDR_CONTENT_LENGTH, pos
												}
											}
											return SIP_HDR_UNKNOWN, pos
										}
										return SIP_HDR_UNKNOWN, pos
									case 't':
										pos++
										switch src[pos] | 0x20 {
										case 'r':
											pos++
											if (pos + 14) >= len1 {
												return SIP_HDR_UNKNOWN, pos
											}
											if ((src[pos] | 0x20) == 'a') &&
												((src[pos+1] | 0x20) == 'n') &&
												((src[pos+2] | 0x20) == 's') &&
												((src[pos+3] | 0x20) == 'f') &&
												((src[pos+4] | 0x20) == 'e') &&
												((src[pos+5] | 0x20) == 'r') &&
												(src[pos+6] == '-') &&
												((src[pos+7] | 0x20) == 'e') &&
												((src[pos+8] | 0x20) == 'n') &&
												((src[pos+9] | 0x20) == 'c') &&
												((src[pos+10] | 0x20) == 'o') &&
												((src[pos+11] | 0x20) == 'd') &&
												((src[pos+12] | 0x20) == 'i') &&
												((src[pos+13] | 0x20) == 'n') &&
												((src[pos+14] | 0x20) == 'g') {
												pos += 15
												if (pos >= len1) || !IsSipToken(src[pos]) {
													return SIP_HDR_CONTENT_TRANSFER_ENCODING, pos
												}
											}
											return SIP_HDR_UNKNOWN, pos
										case 'y':
											pos++
											if (pos + 1) >= len1 {
												return SIP_HDR_UNKNOWN, pos
											}
											if ((src[pos] | 0x20) == 'p') &&
												((src[pos+1] | 0x20) == 'e') {
												pos += 2
												if (pos >= len1) || !IsSipToken(src[pos]) {
													return SIP_HDR_CONTENT_TYPE, pos
												}
											}
											return SIP_HDR_UNKNOWN, pos
										}
										return SIP_HDR_UNKNOWN, pos
									}
								}
							}
						}
						return SIP_HDR_UNKNOWN, pos
					}
				}
			}
			return SIP_HDR_UNKNOWN, pos
		case 's':
			pos++
			if (pos + 1) >= len1 {
				return SIP_HDR_UNKNOWN, pos
			}
			if ((src[pos] | 0x20) == 'e') &&
				((src[pos+1] | 0x20) == 'q') {
				pos += 2
				if (pos >= len1) || !IsSipToken(src[pos]) {
					return SIP_HDR_CSEQ, pos
				}
			}
			return SIP_HDR_UNKNOWN, pos
		}
		return SIP_HDR_UNKNOWN, pos
	case 'd':
		pos++
		switch src[pos] | 0x20 {
		case 'a':
			pos++
			if (pos + 1) >= len1 {
				return SIP_HDR_UNKNOWN, pos
			}
			if ((src[pos] | 0x20) == 't') &&
				((src[pos+1] | 0x20) == 'e') {
				pos += 2
				if (pos >= len1) || !IsSipToken(src[pos]) {
					return SIP_HDR_DATE, pos
				}
			}
			return SIP_HDR_UNKNOWN, pos
		case 'i':
			pos++
			if (pos + 6) >= len1 {
				return SIP_HDR_UNKNOWN, pos
			}
			if ((src[pos] | 0x20) == 'v') &&
				((src[pos+1] | 0x20) == 'e') &&
				((src[pos+2] | 0x20) == 'r') &&
				((src[pos+3] | 0x20) == 's') &&
				((src[pos+4] | 0x20) == 'i') &&
				((src[pos+5] | 0x20) == 'o') &&
				((src[pos+6] | 0x20) == 'n') {
				pos += 7
				if (pos >= len1) || !IsSipToken(src[pos]) {
					return SIP_HDR_DIVERSION, pos
				}
			}
			return SIP_HDR_UNKNOWN, pos
		}
		return SIP_HDR_UNKNOWN, pos
	case 'e':
		pos++
		if (pos >= len1) || !IsSipToken(src[pos]) {
			return SIP_HDR_CONTENT_ENCODING, pos
		}
		switch src[pos] | 0x20 {
		case 'r':
			pos++
			if (pos + 7) >= len1 {
				return SIP_HDR_UNKNOWN, pos
			}
			if ((src[pos] | 0x20) == 'r') &&
				((src[pos+1] | 0x20) == 'o') &&
				((src[pos+2] | 0x20) == 'r') &&
				(src[pos+3] == '-') &&
				((src[pos+4] | 0x20) == 'i') &&
				((src[pos+5] | 0x20) == 'n') &&
				((src[pos+6] | 0x20) == 'f') &&
				((src[pos+7] | 0x20) == 'o') {
				pos += 8
				if (pos >= len1) || !IsSipToken(src[pos]) {
					return SIP_HDR_ERROR_INFO, pos
				}
			}
			return SIP_HDR_UNKNOWN, pos
		case 'v':
			pos++
			if (pos + 2) >= len1 {
				return SIP_HDR_UNKNOWN, pos
			}
			if ((src[pos] | 0x20) == 'e') &&
				((src[pos+1] | 0x20) == 'n') &&
				((src[pos+2] | 0x20) == 't') {
				pos += 3
				if (pos >= len1) || !IsSipToken(src[pos]) {
					return SIP_HDR_EVENT, pos
				}
			}
			return SIP_HDR_UNKNOWN, pos
		case 'x':
			pos++
			if (pos + 4) >= len1 {
				return SIP_HDR_UNKNOWN, pos
			}
			if ((src[pos] | 0x20) == 'p') &&
				((src[pos+1] | 0x20) == 'i') &&
				((src[pos+2] | 0x20) == 'r') &&
				((src[pos+3] | 0x20) == 'e') &&
				((src[pos+4] | 0x20) == 's') {
				pos += 5
				if (pos >= len1) || !IsSipToken(src[pos]) {
					return SIP_HDR_EXPIRES, pos
				}
			}
			return SIP_HDR_UNKNOWN, pos
		}
		return SIP_HDR_UNKNOWN, pos
	case 'f':
		pos++
		if (pos >= len1) || !IsSipToken(src[pos]) {
			return SIP_HDR_FROM, pos
		}
		switch src[pos] | 0x20 {
		case 'e':
			pos++
			if (pos + 9) >= len1 {
				return SIP_HDR_UNKNOWN, pos
			}
			if ((src[pos] | 0x20) == 'a') &&
				((src[pos+1] | 0x20) == 't') &&
				((src[pos+2] | 0x20) == 'u') &&
				((src[pos+3] | 0x20) == 'r') &&
				((src[pos+4] | 0x20) == 'e') &&
				(src[pos+5] == '-') &&
				((src[pos+6] | 0x20) == 'c') &&
				((src[pos+7] | 0x20) == 'a') &&
				((src[pos+8] | 0x20) == 'p') &&
				((src[pos+9] | 0x20) == 's') {
				pos += 10
				if (pos >= len1) || !IsSipToken(src[pos]) {
					return SIP_HDR_FEATURE_CAPS, pos
				}
			}
			return SIP_HDR_UNKNOWN, pos
		case 'l':
			pos++
			if (pos + 7) >= len1 {
				return SIP_HDR_UNKNOWN, pos
			}
			if ((src[pos] | 0x20) == 'o') &&
				((src[pos+1] | 0x20) == 'w') &&
				(src[pos+2] == '-') &&
				((src[pos+3] | 0x20) == 't') &&
				((src[pos+4] | 0x20) == 'i') &&
				((src[pos+5] | 0x20) == 'm') &&
				((src[pos+6] | 0x20) == 'e') &&
				((src[pos+7] | 0x20) == 'r') {
				pos += 8
				if (pos >= len1) || !IsSipToken(src[pos]) {
					return SIP_HDR_FLOW_TIMER, pos
				}
			}
			return SIP_HDR_UNKNOWN, pos
		case 'r':
			pos++
			if (pos + 1) >= len1 {
				return SIP_HDR_UNKNOWN, pos
			}
			if ((src[pos] | 0x20) == 'o') &&
				((src[pos+1] | 0x20) == 'm') {
				pos += 2
				if (pos >= len1) || !IsSipToken(src[pos]) {
					return SIP_HDR_FROM, pos
				}
			}
			return SIP_HDR_UNKNOWN, pos
		}
		return SIP_HDR_UNKNOWN, pos
	case 'g':
		pos++
		if (pos < len1) && ((src[pos] | 0x20) == 'e') {
			pos++
			if (pos < len1) && ((src[pos] | 0x20) == 'o') {
				pos++
				if (pos < len1) && ((src[pos] | 0x20) == 'l') {
					pos++
					if (pos < len1) && ((src[pos] | 0x20) == 'o') {
						pos++
						if (pos < len1) && ((src[pos] | 0x20) == 'c') {
							pos++
							if (pos < len1) && ((src[pos] | 0x20) == 'a') {
								pos++
								if (pos < len1) && ((src[pos] | 0x20) == 't') {
									pos++
									if (pos < len1) && ((src[pos] | 0x20) == 'i') {
										pos++
										if (pos < len1) && ((src[pos] | 0x20) == 'o') {
											pos++
											if (pos < len1) && ((src[pos] | 0x20) == 'n') {
												pos++
												if (pos >= len1) || !IsSipToken(src[pos]) {
													return SIP_HDR_GEOLOCATION, pos
												}
												if (pos < len1) && (src[pos] == '-') {
													pos++
													switch src[pos] | 0x20 {
													case 'e':
														pos++
														if (pos + 3) >= len1 {
															return SIP_HDR_UNKNOWN, pos
														}
														if ((src[pos] | 0x20) == 'r') &&
															((src[pos+1] | 0x20) == 'r') &&
															((src[pos+2] | 0x20) == 'o') &&
															((src[pos+3] | 0x20) == 'r') {
															pos += 4
															if (pos >= len1) || !IsSipToken(src[pos]) {
																return SIP_HDR_GEOLOCATION_ERROR, pos
															}
														}
														return SIP_HDR_UNKNOWN, pos
													case 'r':
														pos++
														if (pos + 5) >= len1 {
															return SIP_HDR_UNKNOWN, pos
														}
														if ((src[pos] | 0x20) == 'o') &&
															((src[pos+1] | 0x20) == 'u') &&
															((src[pos+2] | 0x20) == 't') &&
															((src[pos+3] | 0x20) == 'i') &&
															((src[pos+4] | 0x20) == 'n') &&
															((src[pos+5] | 0x20) == 'g') {
															pos += 6
															if (pos >= len1) || !IsSipToken(src[pos]) {
																return SIP_HDR_GEOLOCATION_ROUTING, pos
															}
														}
														return SIP_HDR_UNKNOWN, pos
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return SIP_HDR_UNKNOWN, pos
	case 'h':
		pos++
		if (pos + 10) >= len1 {
			return SIP_HDR_UNKNOWN, pos
		}
		if ((src[pos] | 0x20) == 'i') &&
			((src[pos+1] | 0x20) == 's') &&
			((src[pos+2] | 0x20) == 't') &&
			((src[pos+3] | 0x20) == 'o') &&
			((src[pos+4] | 0x20) == 'r') &&
			((src[pos+5] | 0x20) == 'y') &&
			(src[pos+6] == '-') &&
			((src[pos+7] | 0x20) == 'i') &&
			((src[pos+8] | 0x20) == 'n') &&
			((src[pos+9] | 0x20) == 'f') &&
			((src[pos+10] | 0x20) == 'o') {
			pos += 11
			if (pos >= len1) || !IsSipToken(src[pos]) {
				return SIP_HDR_HISTORY_INFO, pos
			}
		}
		return SIP_HDR_UNKNOWN, pos
	case 'i':
		pos++
		if (pos >= len1) || !IsSipToken(src[pos]) {
			return SIP_HDR_CALL_ID, pos
		}
		switch src[pos] | 0x20 {
		case 'd':
			pos++
			if (pos < len1) && ((src[pos] | 0x20) == 'e') {
				pos++
				if (pos < len1) && ((src[pos] | 0x20) == 'n') {
					pos++
					if (pos < len1) && ((src[pos] | 0x20) == 't') {
						pos++
						if (pos < len1) && ((src[pos] | 0x20) == 'i') {
							pos++
							if (pos < len1) && ((src[pos] | 0x20) == 't') {
								pos++
								if (pos < len1) && ((src[pos] | 0x20) == 'y') {
									pos++
									if (pos >= len1) || !IsSipToken(src[pos]) {
										return SIP_HDR_IDENTITY, pos
									}
									if (pos + 4) >= len1 {
										return SIP_HDR_UNKNOWN, pos
									}
									if (src[pos] == '-') &&
										((src[pos+1] | 0x20) == 'i') &&
										((src[pos+2] | 0x20) == 'n') &&
										((src[pos+3] | 0x20) == 'f') &&
										((src[pos+4] | 0x20) == 'o') {
										pos += 5
										if (pos >= len1) || !IsSipToken(src[pos]) {
											return SIP_HDR_IDENTITY_INFO, pos
										}
									}
								}
							}
						}
					}
				}
			}
			return SIP_HDR_UNKNOWN, pos
		case 'n':
			pos++
			switch src[pos] | 0x20 {
			case '-':
				pos++
				if (pos + 7) >= len1 {
					return SIP_HDR_UNKNOWN, pos
				}
				if ((src[pos] | 0x20) == 'r') &&
					((src[pos+1] | 0x20) == 'e') &&
					((src[pos+2] | 0x20) == 'p') &&
					((src[pos+3] | 0x20) == 'l') &&
					((src[pos+4] | 0x20) == 'y') &&
					(src[pos+5] == '-') &&
					((src[pos+6] | 0x20) == 't') &&
					((src[pos+7] | 0x20) == 'o') {
					pos += 8
					if (pos >= len1) || !IsSipToken(src[pos]) {
						return SIP_HDR_IN_REPLY_TO, pos
					}
				}
				return SIP_HDR_UNKNOWN, pos
			case 'f':
				pos++
				if (pos + 8) >= len1 {
					return SIP_HDR_UNKNOWN, pos
				}
				if ((src[pos] | 0x20) == 'o') &&
					(src[pos+1] == '-') &&
					((src[pos+2] | 0x20) == 'p') &&
					((src[pos+3] | 0x20) == 'a') &&
					((src[pos+4] | 0x20) == 'c') &&
					((src[pos+5] | 0x20) == 'k') &&
					((src[pos+6] | 0x20) == 'a') &&
					((src[pos+7] | 0x20) == 'g') &&
					((src[pos+8] | 0x20) == 'e') {
					pos += 9
					if (pos >= len1) || !IsSipToken(src[pos]) {
						return SIP_HDR_INFO_PACKAGE, pos
					}
				}
				return SIP_HDR_UNKNOWN, pos
			}
			return SIP_HDR_UNKNOWN, pos
		}
		return SIP_HDR_UNKNOWN, pos
	case 'j':
		pos++
		if (pos >= len1) || !IsSipToken(src[pos]) {
			return SIP_HDR_REJECT_CONTACT, pos
		}
		if (pos + 2) >= len1 {
			return SIP_HDR_UNKNOWN, pos
		}
		if ((src[pos] | 0x20) == 'o') &&
			((src[pos+1] | 0x20) == 'i') &&
			((src[pos+2] | 0x20) == 'n') {
			pos += 3
			if (pos >= len1) || !IsSipToken(src[pos]) {
				return SIP_HDR_JOIN, pos
			}
		}
		return SIP_HDR_UNKNOWN, pos
	case 'k':
		pos++
		if (pos >= len1) || !IsSipToken(src[pos]) {
			return SIP_HDR_SUPPORTED, pos
		}
		return SIP_HDR_UNKNOWN, pos
	case 'l':
		pos++
		if (pos >= len1) || !IsSipToken(src[pos]) {
			return SIP_HDR_CONTENT_LENGTH, pos
		}
		return SIP_HDR_UNKNOWN, pos
	case 'm':
		pos++
		if (pos >= len1) || !IsSipToken(src[pos]) {
			return SIP_HDR_CONTACT, pos
		}
		switch src[pos] | 0x20 {
		case 'a':
			pos++
			if (pos < len1) && ((src[pos] | 0x20) == 'x') {
				pos++
				if (pos < len1) && (src[pos] == '-') {
					pos++
					switch src[pos] | 0x20 {
					case 'b':
						pos++
						if (pos + 5) >= len1 {
							return SIP_HDR_UNKNOWN, pos
						}
						if ((src[pos] | 0x20) == 'r') &&
							((src[pos+1] | 0x20) == 'e') &&
							((src[pos+2] | 0x20) == 'a') &&
							((src[pos+3] | 0x20) == 'd') &&
							((src[pos+4] | 0x20) == 't') &&
							((src[pos+5] | 0x20) == 'h') {
							pos += 6
							if (pos >= len1) || !IsSipToken(src[pos]) {
								return SIP_HDR_MAX_BREADTH, pos
							}
						}
						return SIP_HDR_UNKNOWN, pos
					case 'f':
						pos++
						if (pos + 6) >= len1 {
							return SIP_HDR_UNKNOWN, pos
						}
						if ((src[pos] | 0x20) == 'o') &&
							((src[pos+1] | 0x20) == 'r') &&
							((src[pos+2] | 0x20) == 'w') &&
							((src[pos+3] | 0x20) == 'a') &&
							((src[pos+4] | 0x20) == 'r') &&
							((src[pos+5] | 0x20) == 'd') &&
							((src[pos+6] | 0x20) == 's') {
							pos += 7
							if (pos >= len1) || !IsSipToken(src[pos]) {
								return SIP_HDR_MAX_FORWARDS, pos
							}
						}
						return SIP_HDR_UNKNOWN, pos
					}
				}
			}
			return SIP_HDR_UNKNOWN, pos
		case 'i':
			pos++
			switch src[pos] | 0x20 {
			case 'm':
				pos++
				if (pos + 8) >= len1 {
					return SIP_HDR_UNKNOWN, pos
				}
				if ((src[pos] | 0x20) == 'e') &&
					(src[pos+1] == '-') &&
					((src[pos+2] | 0x20) == 'v') &&
					((src[pos+3] | 0x20) == 'e') &&
					((src[pos+4] | 0x20) == 'r') &&
					((src[pos+5] | 0x20) == 's') &&
					((src[pos+6] | 0x20) == 'i') &&
					((src[pos+7] | 0x20) == 'o') &&
					((src[pos+8] | 0x20) == 'n') {
					pos += 9
					if (pos >= len1) || !IsSipToken(src[pos]) {
						return SIP_HDR_MIME_VERSION, pos
					}
				}
				return SIP_HDR_UNKNOWN, pos
			case 'n':
				pos++
				if (pos < len1) && (src[pos] == '-') {
					pos++
					switch src[pos] | 0x20 {
					case 'e':
						pos++
						if (pos + 5) >= len1 {
							return SIP_HDR_UNKNOWN, pos
						}
						if ((src[pos] | 0x20) == 'x') &&
							((src[pos+1] | 0x20) == 'p') &&
							((src[pos+2] | 0x20) == 'i') &&
							((src[pos+3] | 0x20) == 'r') &&
							((src[pos+4] | 0x20) == 'e') &&
							((src[pos+5] | 0x20) == 's') {
							pos += 6
							if (pos >= len1) || !IsSipToken(src[pos]) {
								return SIP_HDR_MIN_EXPIRES, pos
							}
						}
						return SIP_HDR_UNKNOWN, pos
					case 's':
						pos++
						if (pos < len1) && ((src[pos] | 0x20) == 'e') {
							pos++
							if (pos >= len1) || !IsSipToken(src[pos]) {
								return SIP_HDR_MIN_SE, pos
							}
						}
						return SIP_HDR_UNKNOWN, pos
					}
				}
				return SIP_HDR_UNKNOWN, pos
			}
			return SIP_HDR_UNKNOWN, pos
		}
		return SIP_HDR_UNKNOWN, pos
	case 'o':
		pos++
		if (pos >= len1) || !IsSipToken(src[pos]) {
			return SIP_HDR_EVENT, pos
		}
		if (pos + 10) >= len1 {
			return SIP_HDR_UNKNOWN, pos
		}
		if ((src[pos] | 0x20) == 'r') &&
			((src[pos+1] | 0x20) == 'g') &&
			((src[pos+2] | 0x20) == 'a') &&
			((src[pos+3] | 0x20) == 'n') &&
			((src[pos+4] | 0x20) == 'i') &&
			((src[pos+5] | 0x20) == 'z') &&
			((src[pos+6] | 0x20) == 'a') &&
			((src[pos+7] | 0x20) == 't') &&
			((src[pos+8] | 0x20) == 'i') &&
			((src[pos+9] | 0x20) == 'o') &&
			((src[pos+10] | 0x20) == 'n') {
			pos += 11
			if (pos >= len1) || !IsSipToken(src[pos]) {
				return SIP_HDR_ORGANIZATION, pos
			}
		}
		return SIP_HDR_UNKNOWN, pos
	case 'p':
		pos++
		switch src[pos] | 0x20 {
		case '-':
			pos++
			switch src[pos] | 0x20 {
			case 'a':
				pos++
				switch src[pos] | 0x20 {
				case 'c':
					pos++
					if (pos + 16) >= len1 {
						return SIP_HDR_UNKNOWN, pos
					}
					if ((src[pos] | 0x20) == 'c') &&
						((src[pos+1] | 0x20) == 'e') &&
						((src[pos+2] | 0x20) == 's') &&
						((src[pos+3] | 0x20) == 's') &&
						(src[pos+4] == '-') &&
						((src[pos+5] | 0x20) == 'n') &&
						((src[pos+6] | 0x20) == 'e') &&
						((src[pos+7] | 0x20) == 't') &&
						((src[pos+8] | 0x20) == 'w') &&
						((src[pos+9] | 0x20) == 'o') &&
						((src[pos+10] | 0x20) == 'r') &&
						((src[pos+11] | 0x20) == 'k') &&
						(src[pos+12] == '-') &&
						((src[pos+13] | 0x20) == 'i') &&
						((src[pos+14] | 0x20) == 'n') &&
						((src[pos+15] | 0x20) == 'f') &&
						((src[pos+16] | 0x20) == 'o') {
						pos += 17
						if (pos >= len1) || !IsSipToken(src[pos]) {
							return SIP_HDR_P_ACCESS_NETWORK_INFO, pos
						}
					}
					return SIP_HDR_UNKNOWN, pos
				case 'n':
					pos++
					if (pos + 9) >= len1 {
						return SIP_HDR_UNKNOWN, pos
					}
					if ((src[pos] | 0x20) == 's') &&
						((src[pos+1] | 0x20) == 'w') &&
						((src[pos+2] | 0x20) == 'e') &&
						((src[pos+3] | 0x20) == 'r') &&
						(src[pos+4] == '-') &&
						((src[pos+5] | 0x20) == 's') &&
						((src[pos+6] | 0x20) == 't') &&
						((src[pos+7] | 0x20) == 'a') &&
						((src[pos+8] | 0x20) == 't') &&
						((src[pos+9] | 0x20) == 'e') {
						pos += 10
						if (pos >= len1) || !IsSipToken(src[pos]) {
							return SIP_HDR_P_ANSWER_STATE, pos
						}
					}
					return SIP_HDR_UNKNOWN, pos
				case 's':
					pos++
					if (pos < len1) && ((src[pos] | 0x20) == 's') {
						pos++
						switch src[pos] | 0x20 {
						case 'e':
							pos++
							if (pos < len1) && ((src[pos] | 0x20) == 'r') {
								pos++
								if (pos < len1) && ((src[pos] | 0x20) == 't') {
									pos++
									if (pos < len1) && ((src[pos] | 0x20) == 'e') {
										pos++
										if (pos < len1) && ((src[pos] | 0x20) == 'd') {
											pos++
											if (pos < len1) && (src[pos] == '-') {
												pos++
												switch src[pos] | 0x20 {
												case 'i':
													pos++
													if (pos + 6) >= len1 {
														return SIP_HDR_UNKNOWN, pos
													}
													if ((src[pos] | 0x20) == 'd') &&
														((src[pos+1] | 0x20) == 'e') &&
														((src[pos+2] | 0x20) == 'n') &&
														((src[pos+3] | 0x20) == 't') &&
														((src[pos+4] | 0x20) == 'i') &&
														((src[pos+5] | 0x20) == 't') &&
														((src[pos+6] | 0x20) == 'y') {
														pos += 7
														if (pos >= len1) || !IsSipToken(src[pos]) {
															return SIP_HDR_P_ASSERTED_IDENTITY, pos
														}
													}
													return SIP_HDR_UNKNOWN, pos
												case 's':
													pos++
													if (pos + 5) >= len1 {
														return SIP_HDR_UNKNOWN, pos
													}
													if ((src[pos] | 0x20) == 'e') &&
														((src[pos+1] | 0x20) == 'r') &&
														((src[pos+2] | 0x20) == 'v') &&
														((src[pos+3] | 0x20) == 'i') &&
														((src[pos+4] | 0x20) == 'c') &&
														((src[pos+5] | 0x20) == 'e') {
														pos += 6
														if (pos >= len1) || !IsSipToken(src[pos]) {
															return SIP_HDR_P_ASSERTED_SERVICE, pos
														}
													}
													return SIP_HDR_UNKNOWN, pos
												}
											}
										}
									}
								}
							}
							return SIP_HDR_UNKNOWN, pos
						case 'o':
							pos++
							if (pos + 9) >= len1 {
								return SIP_HDR_UNKNOWN, pos
							}
							if ((src[pos] | 0x20) == 'c') &&
								((src[pos+1] | 0x20) == 'i') &&
								((src[pos+2] | 0x20) == 'a') &&
								((src[pos+3] | 0x20) == 't') &&
								((src[pos+4] | 0x20) == 'e') &&
								((src[pos+5] | 0x20) == 'd') &&
								(src[pos+6] == '-') &&
								((src[pos+7] | 0x20) == 'u') &&
								((src[pos+8] | 0x20) == 'r') &&
								((src[pos+9] | 0x20) == 'i') {
								pos += 10
								if (pos >= len1) || !IsSipToken(src[pos]) {
									return SIP_HDR_P_ASSOCIATED_URI, pos
								}
							}
							return SIP_HDR_UNKNOWN, pos
						}
					}
					return SIP_HDR_UNKNOWN, pos
				}
				return SIP_HDR_UNKNOWN, pos
			case 'c':
				pos++
				switch src[pos] | 0x20 {
				case 'a':
					pos++
					if (pos + 12) >= len1 {
						return SIP_HDR_UNKNOWN, pos
					}
					if ((src[pos] | 0x20) == 'l') &&
						((src[pos+1] | 0x20) == 'l') &&
						((src[pos+2] | 0x20) == 'e') &&
						((src[pos+3] | 0x20) == 'd') &&
						(src[pos+4] == '-') &&
						((src[pos+5] | 0x20) == 'p') &&
						((src[pos+6] | 0x20) == 'a') &&
						((src[pos+7] | 0x20) == 'r') &&
						((src[pos+8] | 0x20) == 't') &&
						((src[pos+9] | 0x20) == 'y') &&
						(src[pos+10] == '-') &&
						((src[pos+11] | 0x20) == 'i') &&
						((src[pos+12] | 0x20) == 'd') {
						pos += 13
						if (pos >= len1) || !IsSipToken(src[pos]) {
							return SIP_HDR_P_CALLED_PARTY_ID, pos
						}
					}
					return SIP_HDR_UNKNOWN, pos
				case 'h':
					pos++
					if (pos < len1) && ((src[pos] | 0x20) == 'a') {
						pos++
						if (pos < len1) && ((src[pos] | 0x20) == 'r') {
							pos++
							if (pos < len1) && ((src[pos] | 0x20) == 'g') {
								pos++
								if (pos < len1) && ((src[pos] | 0x20) == 'i') {
									pos++
									if (pos < len1) && ((src[pos] | 0x20) == 'n') {
										pos++
										if (pos < len1) && ((src[pos] | 0x20) == 'g') {
											pos++
											if (pos < len1) && (src[pos] == '-') {
												pos++
												switch src[pos] | 0x20 {
												case 'f':
													pos++
													if (pos + 14) >= len1 {
														return SIP_HDR_UNKNOWN, pos
													}
													if ((src[pos] | 0x20) == 'u') &&
														((src[pos+1] | 0x20) == 'n') &&
														((src[pos+2] | 0x20) == 'c') &&
														((src[pos+3] | 0x20) == 't') &&
														((src[pos+4] | 0x20) == 'i') &&
														((src[pos+5] | 0x20) == 'o') &&
														((src[pos+6] | 0x20) == 'n') &&
														(src[pos+7] == '-') &&
														((src[pos+8] | 0x20) == 'a') &&
														((src[pos+9] | 0x20) == 'd') &&
														((src[pos+10] | 0x20) == 'd') &&
														((src[pos+11] | 0x20) == 'r') &&
														((src[pos+12] | 0x20) == 'e') &&
														((src[pos+13] | 0x20) == 's') &&
														((src[pos+14] | 0x20) == 's') {
														pos += 15
														if (pos >= len1) || !IsSipToken(src[pos]) {
															return SIP_HDR_P_CHARGING_FUNCTION_ADDRESSES, pos
														}
													}
													return SIP_HDR_UNKNOWN, pos
												case 'v':
													pos++
													if (pos + 4) >= len1 {
														return SIP_HDR_UNKNOWN, pos
													}
													if ((src[pos] | 0x20) == 'e') &&
														((src[pos+1] | 0x20) == 'c') &&
														((src[pos+2] | 0x20) == 't') &&
														((src[pos+3] | 0x20) == 'o') &&
														((src[pos+4] | 0x20) == 'r') {
														pos += 5
														if (pos >= len1) || !IsSipToken(src[pos]) {
															return SIP_HDR_P_CHARGING_VECTOR, pos
														}
													}
													return SIP_HDR_UNKNOWN, pos
												}
											}
										}
									}
								}
							}
						}
					}
					return SIP_HDR_UNKNOWN, pos
				}
				return SIP_HDR_UNKNOWN, pos
			case 'd':
				pos++
				if (pos < len1) && ((src[pos] | 0x20) == 'c') {
					pos++
					if (pos < len1) && ((src[pos] | 0x20) == 's') {
						pos++
						if (pos < len1) && (src[pos] == '-') {
							pos++
							switch src[pos] | 0x20 {
							case 'b':
								pos++
								if (pos + 10) >= len1 {
									return SIP_HDR_UNKNOWN, pos
								}
								if ((src[pos] | 0x20) == 'i') &&
									((src[pos+1] | 0x20) == 'l') &&
									((src[pos+2] | 0x20) == 'l') &&
									((src[pos+3] | 0x20) == 'i') &&
									((src[pos+4] | 0x20) == 'n') &&
									((src[pos+5] | 0x20) == 'g') &&
									(src[pos+6] == '-') &&
									((src[pos+7] | 0x20) == 'i') &&
									((src[pos+8] | 0x20) == 'n') &&
									((src[pos+9] | 0x20) == 'f') &&
									((src[pos+10] | 0x20) == 'o') {
									pos += 11
									if (pos >= len1) || !IsSipToken(src[pos]) {
										return SIP_HDR_P_DCS_BILLING_INFO, pos
									}
								}
								return SIP_HDR_UNKNOWN, pos
							case 'l':
								pos++
								if (pos + 2) >= len1 {
									return SIP_HDR_UNKNOWN, pos
								}
								if ((src[pos] | 0x20) == 'a') &&
									((src[pos+1] | 0x20) == 'e') &&
									((src[pos+2] | 0x20) == 's') {
									pos += 3
									if (pos >= len1) || !IsSipToken(src[pos]) {
										return SIP_HDR_P_DCS_LAES, pos
									}
								}
								return SIP_HDR_UNKNOWN, pos
							case 'o':
								pos++
								if (pos + 2) >= len1 {
									return SIP_HDR_UNKNOWN, pos
								}
								if ((src[pos] | 0x20) == 's') &&
									((src[pos+1] | 0x20) == 'p') &&
									((src[pos+2] | 0x20) == 's') {
									pos += 3
									if (pos >= len1) || !IsSipToken(src[pos]) {
										return SIP_HDR_P_DCS_OSPS, pos
									}
								}
								return SIP_HDR_UNKNOWN, pos
							case 'r':
								pos++
								if (pos + 6) >= len1 {
									return SIP_HDR_UNKNOWN, pos
								}
								if ((src[pos] | 0x20) == 'e') &&
									((src[pos+1] | 0x20) == 'd') &&
									((src[pos+2] | 0x20) == 'i') &&
									((src[pos+3] | 0x20) == 'r') &&
									((src[pos+4] | 0x20) == 'e') &&
									((src[pos+5] | 0x20) == 'c') &&
									((src[pos+6] | 0x20) == 't') {
									pos += 7
									if (pos >= len1) || !IsSipToken(src[pos]) {
										return SIP_HDR_DCS_REDIRECT, pos
									}
								}
								return SIP_HDR_UNKNOWN, pos
							case 't':
								pos++
								if (pos + 12) >= len1 {
									return SIP_HDR_UNKNOWN, pos
								}
								if ((src[pos] | 0x20) == 'r') &&
									((src[pos+1] | 0x20) == 'a') &&
									((src[pos+2] | 0x20) == 'c') &&
									((src[pos+3] | 0x20) == 'e') &&
									(src[pos+4] == '-') &&
									((src[pos+5] | 0x20) == 'p') &&
									((src[pos+6] | 0x20) == 'a') &&
									((src[pos+7] | 0x20) == 'r') &&
									((src[pos+8] | 0x20) == 't') &&
									((src[pos+9] | 0x20) == 'y') &&
									(src[pos+10] == '-') &&
									((src[pos+11] | 0x20) == 'i') &&
									((src[pos+12] | 0x20) == 'd') {
									pos += 13
									if (pos >= len1) || !IsSipToken(src[pos]) {
										return SIP_HDR_P_DCS_TRACE_PARTY_ID, pos
									}
								}
								return SIP_HDR_UNKNOWN, pos
							}
						}
					}
				}
				return SIP_HDR_UNKNOWN, pos
			case 'e':
				pos++
				if (pos + 9) >= len1 {
					return SIP_HDR_UNKNOWN, pos
				}
				if ((src[pos] | 0x20) == 'a') &&
					((src[pos+1] | 0x20) == 'r') &&
					((src[pos+2] | 0x20) == 'l') &&
					((src[pos+3] | 0x20) == 'y') &&
					(src[pos+4] == '-') &&
					((src[pos+5] | 0x20) == 'm') &&
					((src[pos+6] | 0x20) == 'e') &&
					((src[pos+7] | 0x20) == 'd') &&
					((src[pos+8] | 0x20) == 'i') &&
					((src[pos+9] | 0x20) == 'a') {
					pos += 10
					if (pos >= len1) || !IsSipToken(src[pos]) {
						return SIP_HDR_P_EARLY_MEDIA, pos
					}
				}
				return SIP_HDR_UNKNOWN, pos
			case 'm':
				pos++
				if (pos + 17) >= len1 {
					return SIP_HDR_UNKNOWN, pos
				}
				if ((src[pos] | 0x20) == 'e') &&
					((src[pos+1] | 0x20) == 'd') &&
					((src[pos+2] | 0x20) == 'i') &&
					((src[pos+3] | 0x20) == 'a') &&
					(src[pos+4] == '-') &&
					((src[pos+5] | 0x20) == 'a') &&
					((src[pos+6] | 0x20) == 'u') &&
					((src[pos+7] | 0x20) == 't') &&
					((src[pos+8] | 0x20) == 'h') &&
					((src[pos+9] | 0x20) == 'o') &&
					((src[pos+10] | 0x20) == 'r') &&
					((src[pos+11] | 0x20) == 'i') &&
					((src[pos+12] | 0x20) == 'z') &&
					((src[pos+13] | 0x20) == 'a') &&
					((src[pos+14] | 0x20) == 't') &&
					((src[pos+15] | 0x20) == 'i') &&
					((src[pos+16] | 0x20) == 'o') &&
					((src[pos+17] | 0x20) == 'n') {
					pos += 18
					if (pos >= len1) || !IsSipToken(src[pos]) {
						return SIP_HDR_P_MEDIA_AUTHORIZATION, pos
					}
				}
				return SIP_HDR_UNKNOWN, pos
			case 'p':
				pos++
				if (pos < len1) && ((src[pos] | 0x20) == 'r') {
					pos++
					switch src[pos] | 0x20 {
					case 'e':
						pos++
						if (pos < len1) && ((src[pos] | 0x20) == 'f') {
							pos++
							if (pos < len1) && ((src[pos] | 0x20) == 'e') {
								pos++
								if (pos < len1) && ((src[pos] | 0x20) == 'r') {
									pos++
									if (pos < len1) && ((src[pos] | 0x20) == 'r') {
										pos++
										if (pos < len1) && ((src[pos] | 0x20) == 'e') {
											pos++
											if (pos < len1) && ((src[pos] | 0x20) == 'd') {
												pos++
												if (pos < len1) && (src[pos] == '-') {
													pos++
													switch src[pos] | 0x20 {
													case 'i':
														pos++
														if (pos + 6) >= len1 {
															return SIP_HDR_UNKNOWN, pos
														}
														if ((src[pos] | 0x20) == 'd') &&
															((src[pos+1] | 0x20) == 'e') &&
															((src[pos+2] | 0x20) == 'n') &&
															((src[pos+3] | 0x20) == 't') &&
															((src[pos+4] | 0x20) == 'i') &&
															((src[pos+5] | 0x20) == 't') &&
															((src[pos+6] | 0x20) == 'y') {
															pos += 7
															if (pos >= len1) || !IsSipToken(src[pos]) {
																return SIP_HDR_P_PREFERRED_IDENTITY, pos
															}
														}
														return SIP_HDR_UNKNOWN, pos
													case 's':
														pos++
														if (pos + 5) >= len1 {
															return SIP_HDR_UNKNOWN, pos
														}
														if ((src[pos] | 0x20) == 'e') &&
															((src[pos+1] | 0x20) == 'r') &&
															((src[pos+2] | 0x20) == 'v') &&
															((src[pos+3] | 0x20) == 'i') &&
															((src[pos+4] | 0x20) == 'c') &&
															((src[pos+5] | 0x20) == 'e') {
															pos += 6
															if (pos >= len1) || !IsSipToken(src[pos]) {
																return SIP_HDR_P_PREFERRED_SERVICE, pos
															}
														}
														return SIP_HDR_UNKNOWN, pos
													}
												}
											}
										}
									}
								}
							}
						}
						return SIP_HDR_UNKNOWN, pos
					case 'i':
						pos++
						if (pos + 22) >= len1 {
							return SIP_HDR_UNKNOWN, pos
						}
						if ((src[pos] | 0x20) == 'v') &&
							((src[pos+1] | 0x20) == 'a') &&
							((src[pos+2] | 0x20) == 't') &&
							((src[pos+3] | 0x20) == 'e') &&
							(src[pos+4] == '-') &&
							((src[pos+5] | 0x20) == 'n') &&
							((src[pos+6] | 0x20) == 'e') &&
							((src[pos+7] | 0x20) == 't') &&
							((src[pos+8] | 0x20) == 'w') &&
							((src[pos+9] | 0x20) == 'o') &&
							((src[pos+10] | 0x20) == 'r') &&
							((src[pos+11] | 0x20) == 'k') &&
							(src[pos+12] == '-') &&
							((src[pos+13] | 0x20) == 'i') &&
							((src[pos+14] | 0x20) == 'n') &&
							((src[pos+15] | 0x20) == 'd') &&
							((src[pos+16] | 0x20) == 'i') &&
							((src[pos+17] | 0x20) == 'c') &&
							((src[pos+18] | 0x20) == 'a') &&
							((src[pos+19] | 0x20) == 't') &&
							((src[pos+20] | 0x20) == 'i') &&
							((src[pos+21] | 0x20) == 'o') &&
							((src[pos+22] | 0x20) == 'n') {
							pos += 23
							if (pos >= len1) || !IsSipToken(src[pos]) {
								return SIP_HDR_P_PRIVATE_NETWORK_INDICATION, pos
							}
						}
						return SIP_HDR_UNKNOWN, pos
					case 'o':
						pos++
						if (pos + 7) >= len1 {
							return SIP_HDR_UNKNOWN, pos
						}
						if ((src[pos] | 0x20) == 'f') &&
							((src[pos+1] | 0x20) == 'i') &&
							((src[pos+2] | 0x20) == 'l') &&
							((src[pos+3] | 0x20) == 'e') &&
							(src[pos+4] == '-') &&
							((src[pos+5] | 0x20) == 'k') &&
							((src[pos+6] | 0x20) == 'e') &&
							((src[pos+7] | 0x20) == 'y') {
							pos += 8
							if (pos >= len1) || !IsSipToken(src[pos]) {
								return SIP_HDR_P_PROFILE_KEY, pos
							}
						}
						return SIP_HDR_UNKNOWN, pos
					}
				}
				return SIP_HDR_UNKNOWN, pos
			case 'r':
				pos++
				if (pos + 14) >= len1 {
					return SIP_HDR_UNKNOWN, pos
				}
				if ((src[pos] | 0x20) == 'e') &&
					((src[pos+1] | 0x20) == 'f') &&
					((src[pos+2] | 0x20) == 'u') &&
					((src[pos+3] | 0x20) == 's') &&
					((src[pos+4] | 0x20) == 'e') &&
					((src[pos+5] | 0x20) == 'd') &&
					(src[pos+6] == '-') &&
					((src[pos+7] | 0x20) == 'u') &&
					((src[pos+8] | 0x20) == 'r') &&
					((src[pos+9] | 0x20) == 'i') &&
					(src[pos+10] == '-') &&
					((src[pos+11] | 0x20) == 'l') &&
					((src[pos+12] | 0x20) == 'i') &&
					((src[pos+13] | 0x20) == 's') &&
					((src[pos+14] | 0x20) == 't') {
					pos += 15
					if (pos >= len1) || !IsSipToken(src[pos]) {
						return SIP_HDR_P_REFUSED_URI_LIST, pos
					}
				}
				return SIP_HDR_UNKNOWN, pos
			case 's':
				pos++
				if (pos + 9) >= len1 {
					return SIP_HDR_UNKNOWN, pos
				}
				if ((src[pos] | 0x20) == 'e') &&
					((src[pos+1] | 0x20) == 'r') &&
					((src[pos+2] | 0x20) == 'v') &&
					((src[pos+3] | 0x20) == 'e') &&
					((src[pos+4] | 0x20) == 'd') &&
					(src[pos+5] == '-') &&
					((src[pos+6] | 0x20) == 'u') &&
					((src[pos+7] | 0x20) == 's') &&
					((src[pos+8] | 0x20) == 'e') &&
					((src[pos+9] | 0x20) == 'r') {
					pos += 10
					if (pos >= len1) || !IsSipToken(src[pos]) {
						return SIP_HDR_P_SERVED_USER, pos
					}
				}
				return SIP_HDR_UNKNOWN, pos
			case 'u':
				pos++
				if (pos + 11) >= len1 {
					return SIP_HDR_UNKNOWN, pos
				}
				if ((src[pos] | 0x20) == 's') &&
					((src[pos+1] | 0x20) == 'e') &&
					((src[pos+2] | 0x20) == 'r') &&
					(src[pos+3] == '-') &&
					((src[pos+4] | 0x20) == 'd') &&
					((src[pos+5] | 0x20) == 'a') &&
					((src[pos+6] | 0x20) == 't') &&
					((src[pos+7] | 0x20) == 'a') &&
					((src[pos+8] | 0x20) == 'b') &&
					((src[pos+9] | 0x20) == 'a') &&
					((src[pos+10] | 0x20) == 's') &&
					((src[pos+11] | 0x20) == 'e') {
					pos += 12
					if (pos >= len1) || !IsSipToken(src[pos]) {
						return SIP_HDR_P_USER_DATABASE, pos
					}
				}
				return SIP_HDR_UNKNOWN, pos
			case 'v':
				pos++
				if (pos + 16) >= len1 {
					return SIP_HDR_UNKNOWN, pos
				}
				if ((src[pos] | 0x20) == 'i') &&
					((src[pos+1] | 0x20) == 's') &&
					((src[pos+2] | 0x20) == 'i') &&
					((src[pos+3] | 0x20) == 't') &&
					((src[pos+4] | 0x20) == 'e') &&
					((src[pos+5] | 0x20) == 'd') &&
					(src[pos+6] == '-') &&
					((src[pos+7] | 0x20) == 'n') &&
					((src[pos+8] | 0x20) == 'e') &&
					((src[pos+9] | 0x20) == 't') &&
					((src[pos+10] | 0x20) == 'w') &&
					((src[pos+11] | 0x20) == 'o') &&
					((src[pos+12] | 0x20) == 'r') &&
					((src[pos+13] | 0x20) == 'k') &&
					(src[pos+14] == '-') &&
					((src[pos+15] | 0x20) == 'i') &&
					((src[pos+16] | 0x20) == 'd') {
					pos += 17
					if (pos >= len1) || !IsSipToken(src[pos]) {
						return SIP_HDR_P_VISITED_NETWORK_ID, pos
					}
				}
				return SIP_HDR_UNKNOWN, pos
			}
			return SIP_HDR_UNKNOWN, pos
		case 'a':
			pos++
			if (pos + 1) >= len1 {
				return SIP_HDR_UNKNOWN, pos
			}
			if ((src[pos] | 0x20) == 't') &&
				((src[pos+1] | 0x20) == 'h') {
				pos += 2
				if (pos >= len1) || !IsSipToken(src[pos]) {
					return SIP_HDR_PATH, pos
				}
			}
			return SIP_HDR_UNKNOWN, pos
		case 'e':
			pos++
			if (pos + 15) >= len1 {
				return SIP_HDR_UNKNOWN, pos
			}
			if ((src[pos] | 0x20) == 'r') &&
				((src[pos+1] | 0x20) == 'm') &&
				((src[pos+2] | 0x20) == 'i') &&
				((src[pos+3] | 0x20) == 's') &&
				((src[pos+4] | 0x20) == 's') &&
				((src[pos+5] | 0x20) == 'i') &&
				((src[pos+6] | 0x20) == 'o') &&
				((src[pos+7] | 0x20) == 'n') &&
				(src[pos+8] == '-') &&
				((src[pos+9] | 0x20) == 'm') &&
				((src[pos+10] | 0x20) == 'i') &&
				((src[pos+11] | 0x20) == 's') &&
				((src[pos+12] | 0x20) == 's') &&
				((src[pos+13] | 0x20) == 'i') &&
				((src[pos+14] | 0x20) == 'n') &&
				((src[pos+15] | 0x20) == 'g') {
				pos += 16
				if (pos >= len1) || !IsSipToken(src[pos]) {
					return SIP_HDR_PERMISSION_MISSING, pos
				}
			}
			return SIP_HDR_UNKNOWN, pos
		case 'o':
			pos++
			if (pos < len1) && ((src[pos] | 0x20) == 'l') {
				pos++
				if (pos < len1) && ((src[pos] | 0x20) == 'i') {
					pos++
					if (pos < len1) && ((src[pos] | 0x20) == 'c') {
						pos++
						if (pos < len1) && ((src[pos] | 0x20) == 'y') {
							pos++
							if (pos < len1) && (src[pos] == '-') {
								pos++
								switch src[pos] | 0x20 {
								case 'c':
									pos++
									if (pos + 5) >= len1 {
										return SIP_HDR_UNKNOWN, pos
									}
									if ((src[pos] | 0x20) == 'o') &&
										((src[pos+1] | 0x20) == 'n') &&
										((src[pos+2] | 0x20) == 't') &&
										((src[pos+3] | 0x20) == 'a') &&
										((src[pos+4] | 0x20) == 'c') &&
										((src[pos+5] | 0x20) == 't') {
										pos += 6
										if (pos >= len1) || !IsSipToken(src[pos]) {
											return SIP_HDR_POLICY_CONTACT, pos
										}
									}
									return SIP_HDR_UNKNOWN, pos
								case 'i':
									pos++
									if (pos < len1) && ((src[pos] | 0x20) == 'd') {
										pos++
										if (pos >= len1) || !IsSipToken(src[pos]) {
											return SIP_HDR_POLICY_ID, pos
										}
									}
									return SIP_HDR_UNKNOWN, pos
								}
							}
						}
					}
				}
			}
			return SIP_HDR_UNKNOWN, pos
		case 'r':
			pos++
			switch src[pos] | 0x20 {
			case 'i':
				pos++
				switch src[pos] | 0x20 {
				case 'o':
					pos++
					if (pos + 3) >= len1 {
						return SIP_HDR_UNKNOWN, pos
					}
					if ((src[pos] | 0x20) == 'r') &&
						((src[pos+1] | 0x20) == 'i') &&
						((src[pos+2] | 0x20) == 't') &&
						((src[pos+3] | 0x20) == 'y') {
						pos += 4
						if (pos >= len1) || !IsSipToken(src[pos]) {
							return SIP_HDR_PRIORITY, pos
						}
					}
					return SIP_HDR_UNKNOWN, pos
				case 'v':
					pos++
					switch src[pos] | 0x20 {
					case '-':
						pos++
						if (pos + 10) >= len1 {
							return SIP_HDR_UNKNOWN, pos
						}
						if ((src[pos] | 0x20) == 'a') &&
							((src[pos+1] | 0x20) == 'n') &&
							((src[pos+2] | 0x20) == 's') &&
							((src[pos+3] | 0x20) == 'w') &&
							((src[pos+4] | 0x20) == 'e') &&
							((src[pos+5] | 0x20) == 'r') &&
							(src[pos+6] == '-') &&
							((src[pos+7] | 0x20) == 'm') &&
							((src[pos+8] | 0x20) == 'o') &&
							((src[pos+9] | 0x20) == 'd') &&
							((src[pos+10] | 0x20) == 'e') {
							pos += 11
							if (pos >= len1) || !IsSipToken(src[pos]) {
								return SIP_HDR_PRIV_ANSWER_MODE, pos
							}
						}
						return SIP_HDR_UNKNOWN, pos
					case 'a':
						pos++
						if (pos + 1) >= len1 {
							return SIP_HDR_UNKNOWN, pos
						}
						if ((src[pos] | 0x20) == 'c') &&
							((src[pos+1] | 0x20) == 'y') {
							pos += 2
							if (pos >= len1) || !IsSipToken(src[pos]) {
								return SIP_HDR_PRIVACY, pos
							}
						}
						return SIP_HDR_UNKNOWN, pos
					}
					return SIP_HDR_UNKNOWN, pos
				}
				return SIP_HDR_UNKNOWN, pos
			case 'o':
				pos++
				if (pos < len1) && ((src[pos] | 0x20) == 'x') {
					pos++
					if (pos < len1) && ((src[pos] | 0x20) == 'y') {
						pos++
						if (pos < len1) && (src[pos] == '-') {
							pos++
							switch src[pos] | 0x20 {
							case 'a':
								pos++
								if (pos < len1) && ((src[pos] | 0x20) == 'u') {
									pos++
									if (pos < len1) && ((src[pos] | 0x20) == 't') {
										pos++
										if (pos < len1) && ((src[pos] | 0x20) == 'h') {
											pos++
											switch src[pos] | 0x20 {
											case 'e':
												pos++
												if (pos + 6) >= len1 {
													return SIP_HDR_UNKNOWN, pos
												}
												if ((src[pos] | 0x20) == 'n') &&
													((src[pos+1] | 0x20) == 't') &&
													((src[pos+2] | 0x20) == 'i') &&
													((src[pos+3] | 0x20) == 'c') &&
													((src[pos+4] | 0x20) == 'a') &&
													((src[pos+5] | 0x20) == 't') &&
													((src[pos+6] | 0x20) == 'e') {
													pos += 7
													if (pos >= len1) || !IsSipToken(src[pos]) {
														return SIP_HDR_PROXY_AUTHENTICATE, pos
													}
												}
												return SIP_HDR_UNKNOWN, pos
											case 'o':
												pos++
												if (pos + 7) >= len1 {
													return SIP_HDR_UNKNOWN, pos
												}
												if ((src[pos] | 0x20) == 'r') &&
													((src[pos+1] | 0x20) == 'i') &&
													((src[pos+2] | 0x20) == 'z') &&
													((src[pos+3] | 0x20) == 'a') &&
													((src[pos+4] | 0x20) == 't') &&
													((src[pos+5] | 0x20) == 'i') &&
													((src[pos+6] | 0x20) == 'o') &&
													((src[pos+7] | 0x20) == 'n') {
													pos += 8
													if (pos >= len1) || !IsSipToken(src[pos]) {
														return SIP_HDR_PROXY_AUTHORIZATION, pos
													}
												}
												return SIP_HDR_UNKNOWN, pos
											}
										}
									}
								}
								return SIP_HDR_UNKNOWN, pos
							case 'r':
								pos++
								if (pos + 5) >= len1 {
									return SIP_HDR_UNKNOWN, pos
								}
								if ((src[pos] | 0x20) == 'e') &&
									((src[pos+1] | 0x20) == 'q') &&
									((src[pos+2] | 0x20) == 'u') &&
									((src[pos+3] | 0x20) == 'i') &&
									((src[pos+4] | 0x20) == 'r') &&
									((src[pos+5] | 0x20) == 'e') {
									pos += 6
									if (pos >= len1) || !IsSipToken(src[pos]) {
										return SIP_HDR_PROXY_REQUIRE, pos
									}
								}
								return SIP_HDR_UNKNOWN, pos
							}
						}
					}
				}
				return SIP_HDR_UNKNOWN, pos
			}
			return SIP_HDR_UNKNOWN, pos
		}
		return SIP_HDR_UNKNOWN, pos
	case 'r':
		pos++
		if (pos >= len1) || !IsSipToken(src[pos]) {
			return SIP_HDR_REFER_TO, pos
		}
		switch src[pos] | 0x20 {
		case 'a':
			pos++
			if (pos + 1) >= len1 {
				return SIP_HDR_UNKNOWN, pos
			}
			if ((src[pos] | 0x20) == 'c') &&
				((src[pos+1] | 0x20) == 'k') {
				pos += 2
				if (pos >= len1) || !IsSipToken(src[pos]) {
					return SIP_HDR_RACK, pos
				}
			}
			return SIP_HDR_UNKNOWN, pos
		case 'e':
			pos++
			switch src[pos] | 0x20 {
			case 'a':
				pos++
				if (pos + 2) >= len1 {
					return SIP_HDR_UNKNOWN, pos
				}
				if ((src[pos] | 0x20) == 's') &&
					((src[pos+1] | 0x20) == 'o') &&
					((src[pos+2] | 0x20) == 'n') {
					pos += 3
					if (pos >= len1) || !IsSipToken(src[pos]) {
						return SIP_HDR_REASON, pos
					}
				}
				return SIP_HDR_UNKNOWN, pos
			case 'c':
				pos++
				switch src[pos] | 0x20 {
				case 'o':
					pos++
					if (pos + 7) >= len1 {
						return SIP_HDR_UNKNOWN, pos
					}
					if ((src[pos] | 0x20) == 'r') &&
						((src[pos+1] | 0x20) == 'd') &&
						(src[pos+2] == '-') &&
						((src[pos+3] | 0x20) == 'r') &&
						((src[pos+4] | 0x20) == 'o') &&
						((src[pos+5] | 0x20) == 'u') &&
						((src[pos+6] | 0x20) == 't') &&
						((src[pos+7] | 0x20) == 'e') {
						pos += 8
						if (pos >= len1) || !IsSipToken(src[pos]) {
							return SIP_HDR_RECORD_ROUTE, pos
						}
					}
					return SIP_HDR_UNKNOWN, pos
				case 'v':
					pos++
					if (pos + 4) >= len1 {
						return SIP_HDR_UNKNOWN, pos
					}
					if (src[pos] == '-') &&
						((src[pos+1] | 0x20) == 'i') &&
						((src[pos+2] | 0x20) == 'n') &&
						((src[pos+3] | 0x20) == 'f') &&
						((src[pos+4] | 0x20) == 'o') {
						pos += 5
						if (pos >= len1) || !IsSipToken(src[pos]) {
							return SIP_HDR_RECV_INFO, pos
						}
					}
					return SIP_HDR_UNKNOWN, pos
				}
				return SIP_HDR_UNKNOWN, pos
			case 'f':
				pos++
				if (pos < len1) && ((src[pos] | 0x20) == 'e') {
					pos++
					if (pos < len1) && ((src[pos] | 0x20) == 'r') {
						pos++
						switch src[pos] | 0x20 {
						case '-':
							pos++
							switch src[pos] | 0x20 {
							case 'e':
								pos++
								if (pos + 7) >= len1 {
									return SIP_HDR_UNKNOWN, pos
								}
								if ((src[pos] | 0x20) == 'v') &&
									((src[pos+1] | 0x20) == 'e') &&
									((src[pos+2] | 0x20) == 'n') &&
									((src[pos+3] | 0x20) == 't') &&
									((src[pos+4] | 0x20) == 's') &&
									(src[pos+5] == '-') &&
									((src[pos+6] | 0x20) == 'a') &&
									((src[pos+7] | 0x20) == 't') {
									pos += 8
									if (pos >= len1) || !IsSipToken(src[pos]) {
										return SIP_HDR_Refer_Events_At, pos
									}
								}
								return SIP_HDR_UNKNOWN, pos
							case 's':
								pos++
								if (pos + 1) >= len1 {
									return SIP_HDR_UNKNOWN, pos
								}
								if ((src[pos] | 0x20) == 'u') &&
									((src[pos+1] | 0x20) == 'b') {
									pos += 2
									if (pos >= len1) || !IsSipToken(src[pos]) {
										return SIP_HDR_REFER_SUB, pos
									}
								}
								return SIP_HDR_UNKNOWN, pos
							case 't':
								pos++
								if (pos < len1) && ((src[pos] | 0x20) == 'o') {
									pos++
									if (pos >= len1) || !IsSipToken(src[pos]) {
										return SIP_HDR_REFER_TO, pos
									}
								}
								return SIP_HDR_UNKNOWN, pos
							}
							return SIP_HDR_UNKNOWN, pos
						case 'r':
							pos++
							if (pos + 4) >= len1 {
								return SIP_HDR_UNKNOWN, pos
							}
							if ((src[pos] | 0x20) == 'e') &&
								((src[pos+1] | 0x20) == 'd') &&
								(src[pos+2] == '-') &&
								((src[pos+3] | 0x20) == 'b') &&
								((src[pos+4] | 0x20) == 'y') {
								pos += 5
								if (pos >= len1) || !IsSipToken(src[pos]) {
									return SIP_HDR_REFERRED_BY, pos
								}
							}
							return SIP_HDR_UNKNOWN, pos
						}
					}
				}
				return SIP_HDR_UNKNOWN, pos
			case 'j':
				pos++
				if (pos + 10) >= len1 {
					return SIP_HDR_UNKNOWN, pos
				}
				if ((src[pos] | 0x20) == 'e') &&
					((src[pos+1] | 0x20) == 'c') &&
					((src[pos+2] | 0x20) == 't') &&
					(src[pos+3] == '-') &&
					((src[pos+4] | 0x20) == 'c') &&
					((src[pos+5] | 0x20) == 'o') &&
					((src[pos+6] | 0x20) == 'n') &&
					((src[pos+7] | 0x20) == 't') &&
					((src[pos+8] | 0x20) == 'a') &&
					((src[pos+9] | 0x20) == 'c') &&
					((src[pos+10] | 0x20) == 't') {
					pos += 11
					if (pos >= len1) || !IsSipToken(src[pos]) {
						return SIP_HDR_REJECT_CONTACT, pos
					}
				}
				return SIP_HDR_UNKNOWN, pos
			case 'p':
				pos++
				if (pos < len1) && ((src[pos] | 0x20) == 'l') {
					pos++
					switch src[pos] | 0x20 {
					case 'a':
						pos++
						if (pos + 2) >= len1 {
							return SIP_HDR_UNKNOWN, pos
						}
						if ((src[pos] | 0x20) == 'c') &&
							((src[pos+1] | 0x20) == 'e') &&
							((src[pos+2] | 0x20) == 's') {
							pos += 3
							if (pos >= len1) || !IsSipToken(src[pos]) {
								return SIP_HDR_REPLACES, pos
							}
						}
						return SIP_HDR_UNKNOWN, pos
					case 'y':
						pos++
						if (pos + 2) >= len1 {
							return SIP_HDR_UNKNOWN, pos
						}
						if (src[pos] == '-') &&
							((src[pos+1] | 0x20) == 't') &&
							((src[pos+2] | 0x20) == 'o') {
							pos += 3
							if (pos >= len1) || !IsSipToken(src[pos]) {
								return SIP_HDR_REPLY_TO, pos
							}
						}
						return SIP_HDR_UNKNOWN, pos
					}
				}
				return SIP_HDR_UNKNOWN, pos
			case 'q':
				pos++
				if (pos < len1) && ((src[pos] | 0x20) == 'u') {
					pos++
					switch src[pos] | 0x20 {
					case 'e':
						pos++
						if (pos + 13) >= len1 {
							return SIP_HDR_UNKNOWN, pos
						}
						if ((src[pos] | 0x20) == 's') &&
							((src[pos+1] | 0x20) == 't') &&
							(src[pos+2] == '-') &&
							((src[pos+3] | 0x20) == 'd') &&
							((src[pos+4] | 0x20) == 'i') &&
							((src[pos+5] | 0x20) == 's') &&
							((src[pos+6] | 0x20) == 'p') &&
							((src[pos+7] | 0x20) == 'o') &&
							((src[pos+8] | 0x20) == 's') &&
							((src[pos+9] | 0x20) == 'i') &&
							((src[pos+10] | 0x20) == 't') &&
							((src[pos+11] | 0x20) == 'i') &&
							((src[pos+12] | 0x20) == 'o') &&
							((src[pos+13] | 0x20) == 'n') {
							pos += 14
							if (pos >= len1) || !IsSipToken(src[pos]) {
								return SIP_HDR_REQUEST_DISPOSITION, pos
							}
						}
						return SIP_HDR_UNKNOWN, pos
					case 'i':
						pos++
						if (pos + 1) >= len1 {
							return SIP_HDR_UNKNOWN, pos
						}
						if ((src[pos] | 0x20) == 'r') &&
							((src[pos+1] | 0x20) == 'e') {
							pos += 2
							if (pos >= len1) || !IsSipToken(src[pos]) {
								return SIP_HDR_REQUIRE, pos
							}
						}
						return SIP_HDR_UNKNOWN, pos
					}
				}
				return SIP_HDR_UNKNOWN, pos
			case 's':
				pos++
				if (pos + 13) >= len1 {
					return SIP_HDR_UNKNOWN, pos
				}
				if ((src[pos] | 0x20) == 'o') &&
					((src[pos+1] | 0x20) == 'u') &&
					((src[pos+2] | 0x20) == 'r') &&
					((src[pos+3] | 0x20) == 'c') &&
					((src[pos+4] | 0x20) == 'e') &&
					(src[pos+5] == '-') &&
					((src[pos+6] | 0x20) == 'p') &&
					((src[pos+7] | 0x20) == 'r') &&
					((src[pos+8] | 0x20) == 'i') &&
					((src[pos+9] | 0x20) == 'o') &&
					((src[pos+10] | 0x20) == 'r') &&
					((src[pos+11] | 0x20) == 'i') &&
					((src[pos+12] | 0x20) == 't') &&
					((src[pos+13] | 0x20) == 'y') {
					pos += 14
					if (pos >= len1) || !IsSipToken(src[pos]) {
						return SIP_HDR_RESOURCE_PRIORITY, pos
					}
				}
				return SIP_HDR_UNKNOWN, pos
			case 't':
				pos++
				if (pos + 7) >= len1 {
					return SIP_HDR_UNKNOWN, pos
				}
				if ((src[pos] | 0x20) == 'r') &&
					((src[pos+1] | 0x20) == 'y') &&
					(src[pos+2] == '-') &&
					((src[pos+3] | 0x20) == 'a') &&
					((src[pos+4] | 0x20) == 'f') &&
					((src[pos+5] | 0x20) == 't') &&
					((src[pos+6] | 0x20) == 'e') &&
					((src[pos+7] | 0x20) == 'r') {
					pos += 8
					if (pos >= len1) || !IsSipToken(src[pos]) {
						return SIP_HDR_RETRY_AFTER, pos
					}
				}
				return SIP_HDR_UNKNOWN, pos
			}
			return SIP_HDR_UNKNOWN, pos
		case 'o':
			pos++
			if (pos + 2) >= len1 {
				return SIP_HDR_UNKNOWN, pos
			}
			if ((src[pos] | 0x20) == 'u') &&
				((src[pos+1] | 0x20) == 't') &&
				((src[pos+2] | 0x20) == 'e') {
				pos += 3
				if (pos >= len1) || !IsSipToken(src[pos]) {
					return SIP_HDR_ROUTE, pos
				}
			}
			return SIP_HDR_UNKNOWN, pos
		case 's':
			pos++
			if (pos + 1) >= len1 {
				return SIP_HDR_UNKNOWN, pos
			}
			if ((src[pos] | 0x20) == 'e') &&
				((src[pos+1] | 0x20) == 'q') {
				pos += 2
				if (pos >= len1) || !IsSipToken(src[pos]) {
					return SIP_HDR_RSEQ, pos
				}
			}
			return SIP_HDR_UNKNOWN, pos
		}
		return SIP_HDR_UNKNOWN, pos
	case 's':
		pos++
		if (pos >= len1) || !IsSipToken(src[pos]) {
			return SIP_HDR_SUBJECT, pos
		}
		switch src[pos] | 0x20 {
		case 'e':
			pos++
			switch src[pos] | 0x20 {
			case 'c':
				pos++
				if (pos < len1) && ((src[pos] | 0x20) == 'u') {
					pos++
					if (pos < len1) && ((src[pos] | 0x20) == 'r') {
						pos++
						if (pos < len1) && ((src[pos] | 0x20) == 'i') {
							pos++
							if (pos < len1) && ((src[pos] | 0x20) == 't') {
								pos++
								if (pos < len1) && ((src[pos] | 0x20) == 'y') {
									pos++
									if (pos < len1) && (src[pos] == '-') {
										pos++
										switch src[pos] | 0x20 {
										case 'c':
											pos++
											if (pos + 4) >= len1 {
												return SIP_HDR_UNKNOWN, pos
											}
											if ((src[pos] | 0x20) == 'l') &&
												((src[pos+1] | 0x20) == 'i') &&
												((src[pos+2] | 0x20) == 'e') &&
												((src[pos+3] | 0x20) == 'n') &&
												((src[pos+4] | 0x20) == 't') {
												pos += 5
												if (pos >= len1) || !IsSipToken(src[pos]) {
													return SIP_HDR_SECURITY_CLIENT, pos
												}
											}
											return SIP_HDR_UNKNOWN, pos
										case 's':
											pos++
											if (pos + 4) >= len1 {
												return SIP_HDR_UNKNOWN, pos
											}
											if ((src[pos] | 0x20) == 'e') &&
												((src[pos+1] | 0x20) == 'r') &&
												((src[pos+2] | 0x20) == 'v') &&
												((src[pos+3] | 0x20) == 'e') &&
												((src[pos+4] | 0x20) == 'r') {
												pos += 5
												if (pos >= len1) || !IsSipToken(src[pos]) {
													return SIP_HDR_SECURITY_SERVER, pos
												}
											}
											return SIP_HDR_UNKNOWN, pos
										case 'v':
											pos++
											if (pos + 4) >= len1 {
												return SIP_HDR_UNKNOWN, pos
											}
											if ((src[pos] | 0x20) == 'e') &&
												((src[pos+1] | 0x20) == 'r') &&
												((src[pos+2] | 0x20) == 'i') &&
												((src[pos+3] | 0x20) == 'f') &&
												((src[pos+4] | 0x20) == 'y') {
												pos += 5
												if (pos >= len1) || !IsSipToken(src[pos]) {
													return SIP_HDR_SECURITY_VERIFY, pos
												}
											}
											return SIP_HDR_UNKNOWN, pos
										}
									}
								}
							}
						}
					}
				}
				return SIP_HDR_UNKNOWN, pos
			case 'r':
				pos++
				if (pos < len1) && ((src[pos] | 0x20) == 'v') {
					pos++
					switch src[pos] | 0x20 {
					case 'e':
						pos++
						if (pos < len1) && ((src[pos] | 0x20) == 'r') {
							pos++
							if (pos >= len1) || !IsSipToken(src[pos]) {
								return SIP_HDR_SERVER, pos
							}
						}
						return SIP_HDR_UNKNOWN, pos
					case 'i':
						pos++
						if (pos + 7) >= len1 {
							return SIP_HDR_UNKNOWN, pos
						}
						if ((src[pos] | 0x20) == 'c') &&
							((src[pos+1] | 0x20) == 'e') &&
							(src[pos+2] == '-') &&
							((src[pos+3] | 0x20) == 'r') &&
							((src[pos+4] | 0x20) == 'o') &&
							((src[pos+5] | 0x20) == 'u') &&
							((src[pos+6] | 0x20) == 't') &&
							((src[pos+7] | 0x20) == 'e') {
							pos += 8
							if (pos >= len1) || !IsSipToken(src[pos]) {
								return SIP_HDR_SERVICE_ROUTE, pos
							}
						}
						return SIP_HDR_UNKNOWN, pos
					}
				}
				return SIP_HDR_UNKNOWN, pos
			case 's':
				pos++
				if (pos < len1) && ((src[pos] | 0x20) == 's') {
					pos++
					if (pos < len1) && ((src[pos] | 0x20) == 'i') {
						pos++
						if (pos < len1) && ((src[pos] | 0x20) == 'o') {
							pos++
							if (pos < len1) && ((src[pos] | 0x20) == 'n') {
								pos++
								if (pos < len1) && (src[pos] == '-') {
									pos++
									switch src[pos] | 0x20 {
									case 'e':
										pos++
										if (pos + 5) >= len1 {
											return SIP_HDR_UNKNOWN, pos
										}
										if ((src[pos] | 0x20) == 'x') &&
											((src[pos+1] | 0x20) == 'p') &&
											((src[pos+2] | 0x20) == 'i') &&
											((src[pos+3] | 0x20) == 'r') &&
											((src[pos+4] | 0x20) == 'e') &&
											((src[pos+5] | 0x20) == 's') {
											pos += 6
											if (pos >= len1) || !IsSipToken(src[pos]) {
												return SIP_HDR_SESSION_EXPIRES, pos
											}
										}
										return SIP_HDR_UNKNOWN, pos
									case 'i':
										pos++
										if (pos < len1) && ((src[pos] | 0x20) == 'd') {
											pos++
											if (pos >= len1) || !IsSipToken(src[pos]) {
												return SIP_HDR_SESSION_ID, pos
											}
										}
										return SIP_HDR_UNKNOWN, pos
									}
								}
							}
						}
					}
				}
				return SIP_HDR_UNKNOWN, pos
			}
			return SIP_HDR_UNKNOWN, pos
		case 'i':
			pos++
			if (pos < len1) && ((src[pos] | 0x20) == 'p') {
				pos++
				if (pos < len1) && (src[pos] == '-') {
					pos++
					switch src[pos] | 0x20 {
					case 'e':
						pos++
						if (pos + 2) >= len1 {
							return SIP_HDR_UNKNOWN, pos
						}
						if ((src[pos] | 0x20) == 't') &&
							((src[pos+1] | 0x20) == 'a') &&
							((src[pos+2] | 0x20) == 'g') {
							pos += 3
							if (pos >= len1) || !IsSipToken(src[pos]) {
								return SIP_HDR_SIP_ETAG, pos
							}
						}
						return SIP_HDR_UNKNOWN, pos
					case 'i':
						pos++
						if (pos + 6) >= len1 {
							return SIP_HDR_UNKNOWN, pos
						}
						if ((src[pos] | 0x20) == 'f') &&
							(src[pos+1] == '-') &&
							((src[pos+2] | 0x20) == 'm') &&
							((src[pos+3] | 0x20) == 'a') &&
							((src[pos+4] | 0x20) == 't') &&
							((src[pos+5] | 0x20) == 'c') &&
							((src[pos+6] | 0x20) == 'h') {
							pos += 7
							if (pos >= len1) || !IsSipToken(src[pos]) {
								return SIP_SIP_IF_MATCH, pos
							}
						}
						return SIP_HDR_UNKNOWN, pos
					}
				}
			}
			return SIP_HDR_UNKNOWN, pos
		case 'u':
			pos++
			switch src[pos] | 0x20 {
			case 'b':
				pos++
				switch src[pos] | 0x20 {
				case 'j':
					pos++
					if (pos + 2) >= len1 {
						return SIP_HDR_UNKNOWN, pos
					}
					if ((src[pos] | 0x20) == 'e') &&
						((src[pos+1] | 0x20) == 'c') &&
						((src[pos+2] | 0x20) == 't') {
						pos += 3
						if (pos >= len1) || !IsSipToken(src[pos]) {
							return SIP_HDR_SUBJECT, pos
						}
					}
					return SIP_HDR_UNKNOWN, pos
				case 's':
					pos++
					if (pos + 13) >= len1 {
						return SIP_HDR_UNKNOWN, pos
					}
					if ((src[pos] | 0x20) == 'c') &&
						((src[pos+1] | 0x20) == 'r') &&
						((src[pos+2] | 0x20) == 'i') &&
						((src[pos+3] | 0x20) == 'p') &&
						((src[pos+4] | 0x20) == 't') &&
						((src[pos+5] | 0x20) == 'i') &&
						((src[pos+6] | 0x20) == 'o') &&
						((src[pos+7] | 0x20) == 'n') &&
						(src[pos+8] == '-') &&
						((src[pos+9] | 0x20) == 's') &&
						((src[pos+10] | 0x20) == 't') &&
						((src[pos+11] | 0x20) == 'a') &&
						((src[pos+12] | 0x20) == 't') &&
						((src[pos+13] | 0x20) == 'e') {
						pos += 14
						if (pos >= len1) || !IsSipToken(src[pos]) {
							return SIP_HDR_SUBSCRIPTION_STATE, pos
						}
					}
					return SIP_HDR_UNKNOWN, pos
				}
				return SIP_HDR_UNKNOWN, pos
			case 'p':
				pos++
				if (pos < len1) && ((src[pos] | 0x20) == 'p') {
					pos++
					switch src[pos] | 0x20 {
					case 'o':
						pos++
						if (pos + 3) >= len1 {
							return SIP_HDR_UNKNOWN, pos
						}
						if ((src[pos] | 0x20) == 'r') &&
							((src[pos+1] | 0x20) == 't') &&
							((src[pos+2] | 0x20) == 'e') &&
							((src[pos+3] | 0x20) == 'd') {
							pos += 4
							if (pos >= len1) || !IsSipToken(src[pos]) {
								return SIP_HDR_SUPPORTED, pos
							}
						}
						return SIP_HDR_UNKNOWN, pos
					case 'r':
						pos++
						if (pos + 11) >= len1 {
							return SIP_HDR_UNKNOWN, pos
						}
						if ((src[pos] | 0x20) == 'e') &&
							((src[pos+1] | 0x20) == 's') &&
							((src[pos+2] | 0x20) == 's') &&
							(src[pos+3] == '-') &&
							((src[pos+4] | 0x20) == 'i') &&
							((src[pos+5] | 0x20) == 'f') &&
							(src[pos+6] == '-') &&
							((src[pos+7] | 0x20) == 'm') &&
							((src[pos+8] | 0x20) == 'a') &&
							((src[pos+9] | 0x20) == 't') &&
							((src[pos+10] | 0x20) == 'c') &&
							((src[pos+11] | 0x20) == 'h') {
							pos += 12
							if (pos >= len1) || !IsSipToken(src[pos]) {
								return SIP_HDR_SUPPRESS_IF_MATCH, pos
							}
						}
						return SIP_HDR_UNKNOWN, pos
					}
				}
				return SIP_HDR_UNKNOWN, pos
			}
			return SIP_HDR_UNKNOWN, pos
		}
		return SIP_HDR_UNKNOWN, pos
	case 't':
		pos++
		if (pos >= len1) || !IsSipToken(src[pos]) {
			return SIP_HDR_TO, pos
		}
		switch src[pos] | 0x20 {
		case 'a':
			pos++
			if (pos + 10) >= len1 {
				return SIP_HDR_UNKNOWN, pos
			}
			if ((src[pos] | 0x20) == 'r') &&
				((src[pos+1] | 0x20) == 'g') &&
				((src[pos+2] | 0x20) == 'e') &&
				((src[pos+3] | 0x20) == 't') &&
				(src[pos+4] == '-') &&
				((src[pos+5] | 0x20) == 'd') &&
				((src[pos+6] | 0x20) == 'i') &&
				((src[pos+7] | 0x20) == 'a') &&
				((src[pos+8] | 0x20) == 'l') &&
				((src[pos+9] | 0x20) == 'o') &&
				((src[pos+10] | 0x20) == 'g') {
				pos += 11
				if (pos >= len1) || !IsSipToken(src[pos]) {
					return SIP_HDR_TARGET_DIALOG, pos
				}
			}
			return SIP_HDR_UNKNOWN, pos
		case 'i':
			pos++
			if (pos + 6) >= len1 {
				return SIP_HDR_UNKNOWN, pos
			}
			if ((src[pos] | 0x20) == 'm') &&
				((src[pos+1] | 0x20) == 'e') &&
				((src[pos+2] | 0x20) == 's') &&
				((src[pos+3] | 0x20) == 't') &&
				((src[pos+4] | 0x20) == 'a') &&
				((src[pos+5] | 0x20) == 'm') &&
				((src[pos+6] | 0x20) == 'p') {
				pos += 7
				if (pos >= len1) || !IsSipToken(src[pos]) {
					return SIP_HDR_TIMESTAMP, pos
				}
			}
			return SIP_HDR_UNKNOWN, pos
		case 'o':
			pos++
			if (pos >= len1) || !IsSipToken(src[pos]) {
				return SIP_HDR_TO, pos
			}
			return SIP_HDR_UNKNOWN, pos
		case 'r':
			pos++
			if (pos + 12) >= len1 {
				return SIP_HDR_UNKNOWN, pos
			}
			if ((src[pos] | 0x20) == 'i') &&
				((src[pos+1] | 0x20) == 'g') &&
				((src[pos+2] | 0x20) == 'g') &&
				((src[pos+3] | 0x20) == 'e') &&
				((src[pos+4] | 0x20) == 'r') &&
				(src[pos+5] == '-') &&
				((src[pos+6] | 0x20) == 'c') &&
				((src[pos+7] | 0x20) == 'o') &&
				((src[pos+8] | 0x20) == 'n') &&
				((src[pos+9] | 0x20) == 's') &&
				((src[pos+10] | 0x20) == 'e') &&
				((src[pos+11] | 0x20) == 'n') &&
				((src[pos+12] | 0x20) == 't') {
				pos += 13
				if (pos >= len1) || !IsSipToken(src[pos]) {
					return SIP_HDR_TRIGGER_CONSENT, pos
				}
			}
			return SIP_HDR_UNKNOWN, pos
		}
		return SIP_HDR_UNKNOWN, pos
	case 'u':
		pos++
		if (pos >= len1) || !IsSipToken(src[pos]) {
			return SIP_HDR_ALLOW_EVENTS, pos
		}
		switch src[pos] | 0x20 {
		case 'n':
			pos++
			if (pos + 8) >= len1 {
				return SIP_HDR_UNKNOWN, pos
			}
			if ((src[pos] | 0x20) == 's') &&
				((src[pos+1] | 0x20) == 'u') &&
				((src[pos+2] | 0x20) == 'p') &&
				((src[pos+3] | 0x20) == 'p') &&
				((src[pos+4] | 0x20) == 'o') &&
				((src[pos+5] | 0x20) == 'r') &&
				((src[pos+6] | 0x20) == 't') &&
				((src[pos+7] | 0x20) == 'e') &&
				((src[pos+8] | 0x20) == 'd') {
				pos += 9
				if (pos >= len1) || !IsSipToken(src[pos]) {
					return SIP_HDR_UNSUPPORTED, pos
				}
			}
			return SIP_HDR_UNKNOWN, pos
		case 's':
			pos++
			if (pos < len1) && ((src[pos] | 0x20) == 'e') {
				pos++
				if (pos < len1) && ((src[pos] | 0x20) == 'r') {
					pos++
					if (pos < len1) && (src[pos] == '-') {
						pos++
						switch src[pos] | 0x20 {
						case 'a':
							pos++
							if (pos + 3) >= len1 {
								return SIP_HDR_UNKNOWN, pos
							}
							if ((src[pos] | 0x20) == 'g') &&
								((src[pos+1] | 0x20) == 'e') &&
								((src[pos+2] | 0x20) == 'n') &&
								((src[pos+3] | 0x20) == 't') {
								pos += 4
								if (pos >= len1) || !IsSipToken(src[pos]) {
									return SIP_HDR_USER_AGENT, pos
								}
							}
							return SIP_HDR_UNKNOWN, pos
						case 't':
							pos++
							if (pos + 5) >= len1 {
								return SIP_HDR_UNKNOWN, pos
							}
							if ((src[pos] | 0x20) == 'o') &&
								(src[pos+1] == '-') &&
								((src[pos+2] | 0x20) == 'u') &&
								((src[pos+3] | 0x20) == 's') &&
								((src[pos+4] | 0x20) == 'e') &&
								((src[pos+5] | 0x20) == 'r') {
								pos += 6
								if (pos >= len1) || !IsSipToken(src[pos]) {
									return SIP_HDR_USER_TO_USER, pos
								}
							}
							return SIP_HDR_UNKNOWN, pos
						}
					}
				}
			}
			return SIP_HDR_UNKNOWN, pos
		}
		return SIP_HDR_UNKNOWN, pos
	case 'v':
		pos++
		if (pos >= len1) || !IsSipToken(src[pos]) {
			return SIP_HDR_VIA, pos
		}
		if (pos + 1) >= len1 {
			return SIP_HDR_UNKNOWN, pos
		}
		if ((src[pos] | 0x20) == 'i') &&
			((src[pos+1] | 0x20) == 'a') {
			pos += 2
			if (pos >= len1) || !IsSipToken(src[pos]) {
				return SIP_HDR_VIA, pos
			}
		}
		return SIP_HDR_UNKNOWN, pos
	case 'w':
		pos++
		switch src[pos] | 0x20 {
		case 'a':
			pos++
			if (pos + 4) >= len1 {
				return SIP_HDR_UNKNOWN, pos
			}
			if ((src[pos] | 0x20) == 'r') &&
				((src[pos+1] | 0x20) == 'n') &&
				((src[pos+2] | 0x20) == 'i') &&
				((src[pos+3] | 0x20) == 'n') &&
				((src[pos+4] | 0x20) == 'g') {
				pos += 5
				if (pos >= len1) || !IsSipToken(src[pos]) {
					return SIP_HDR_WARNING, pos
				}
			}
			return SIP_HDR_UNKNOWN, pos
		case 'w':
			pos++
			if (pos + 13) >= len1 {
				return SIP_HDR_UNKNOWN, pos
			}
			if ((src[pos] | 0x20) == 'w') &&
				(src[pos+1] == '-') &&
				((src[pos+2] | 0x20) == 'a') &&
				((src[pos+3] | 0x20) == 'u') &&
				((src[pos+4] | 0x20) == 't') &&
				((src[pos+5] | 0x20) == 'h') &&
				((src[pos+6] | 0x20) == 'e') &&
				((src[pos+7] | 0x20) == 'n') &&
				((src[pos+8] | 0x20) == 't') &&
				((src[pos+9] | 0x20) == 'i') &&
				((src[pos+10] | 0x20) == 'c') &&
				((src[pos+11] | 0x20) == 'a') &&
				((src[pos+12] | 0x20) == 't') &&
				((src[pos+13] | 0x20) == 'e') {
				pos += 14
				if (pos >= len1) || !IsSipToken(src[pos]) {
					return SIP_HDR_WWW_AUTHENTICATE, pos
				}
			}
			return SIP_HDR_UNKNOWN, pos
		}
		return SIP_HDR_UNKNOWN, pos
	case 'x':
		pos++
		if (pos >= len1) || !IsSipToken(src[pos]) {
			return SIP_HDR_SESSION_EXPIRES, pos
		}
		return SIP_HDR_UNKNOWN, pos
	}

	return SIP_HDR_UNKNOWN, pos
}
